/*
* An API for cellars that implement V2 of the EIP4626-compatible Cellar.sol contract.
*
* See [Cellar.sol](https://github.com/PeggyJV/cellar-contracts/blob/main/src/base/Cellar.sol)
*/

syntax = "proto3";
package steward.v4;

option go_package = "/steward_proto";

import "a_token.proto";
import "debt_token.proto";
import "aave_v3_a_token.proto";
import "aave_v3_debt_token.proto";
import "c_token.proto";
import "f_token.proto";
import "morpho_aave_v2_a_token.proto";
import "morpho_aave_v2_debt_token.proto";
import "morpho_aave_v3_a_token_collateral.proto";
import "morpho_aave_v3_a_token_p2p.proto";
import "morpho_aave_v3_debt_token.proto";
import "uniswap_v3.proto";
import "swap_with_uniswap.proto";
import "fees_and_reserves.proto";
import "zero_x.proto";
import "oneinch.proto";
import "vesting_simple.proto";
import "cellar_adaptor.proto";
import "aave_v2_enable_asset_as_collateral_adaptor.proto";

/*
* Represents a function call to a cellar that implements Cellar.sol
*/
message CellarV2 {
    // The function you wish to execute on the target cellar
    oneof function {
        // Represents function `addPosition(uint256 index, address position)`
        AddPosition add_position = 1;
        // Represents function `callOnAdaptor(AdaptorCall[] memory data)`
        CallOnAdaptor call_on_adaptor = 2;
        // Represents function `removePosition(uint256 index)`
        RemovePosition remove_position = 3;
        // Represents function `setHoldingPosition(uint32 position_id)`
        SetHoldingPosition set_holding_position = 4;
        // Represents function `setStrategistPayoutAddress(address payout)`
        SetStrategistPayoutAddress set_strategist_payout_address = 5;
        // Represents function `swapPositions(uint256 index1, uint256 index2)`
        SwapPositions swap_positions = 6;
        // Represents function `setRebalanceDeviation(uint265)`
        SetRebalanceDeviation set_rebalance_deviation = 7;
        // Represents function `setShareLockPeriod(uint256 newLock)`
        SetShareLockPeriod set_share_lock_period = 8;
    }

    /*
    * Insert a trusted position to the list of positions used by the cellar at a given index.
    *
    * Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
    */
    message AddPosition {
        // Index at which to add the position
        uint32 index = 1;
        // The position's ID in the cellar registry
        uint32 position_id = 2;
        // Data used to configure how the position behaves
        bytes configuration_data = 3;
        // Whether to add position in the debt array, or the credit array.
        bool in_debt_array = 4;
    }

    /*
    * Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
    *
    * Represents function `callOnAdaptor(AdaptorCall[] memory data)`
    */
    message CallOnAdaptor {
        repeated AdaptorCall data = 1;
    }

    /*
    * Remove the position at a given index from the list of positions used by the cellar.
    *
    * Represents function `removePosition(uint32 index, bool inDebtArray)`
    */
    message RemovePosition {
        // Index at which to remove the position
        uint32 index = 1;
        // Whether to remove position from the debt array, or the credit array.
        bool in_debt_array = 2;
    }

    /*
    * Set the holding position used of the cellar.
    *
    * Represents function `setHoldingIndex(uint8 index)`
    */
    message SetHoldingPosition {
        // ID (index) of the new holding position to use
        uint32 position_id = 1;
    }

    /*
    * Sets the Strategists payout address.
    *
    * Represents function `setStrategistPayoutAddress(address payout)`
    */
    message SetStrategistPayoutAddress {
        string payout = 1;
    }

    /*
    * Swap the positions at two given indeces.
    *
    * Represents function `swapPositions(uint32 index1, uint32 index2)`
    */
    message SwapPositions {
        // Index of the first position
        uint32 index_1 = 1;
        // Index of the second position
        uint32 index_2 = 2;
        // Whether to switch positions in the debt array, or the credit array.
        bool in_debt_array = 3;
    }

    /*
    * Allows share lock period to be updated.
    *
    * Represents function `setShareLockPeriod()`
    */
    message SetShareLockPeriod {
        string new_lock = 1;
    }

    /*
    * Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
    * during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
    *
    * Represents function `setRebalanceDeviation(uint256)`
    */
    message SetRebalanceDeviation {
        string new_deviation = 1;
    }
}

/*
* Represent a function call initiated through a governance proposal
*/
message CellarV2Governance {
    // The function to call on the target cellar
    oneof function {
        // Represents function `initiateShutdown()`
        InitiateShutdown initiate_shutdown = 1;
        // Represents function `liftShutdown()`
        LiftShutdown lift_shutdown = 2;
        // Represents function `setPlatformFee(uint256)`
        SetPlatformFee set_platform_fee = 3;
        // Represents function `setStrategistPlatformCut(address)`
        SetStrategistPlatformCut set_strategist_platform_cut = 4;
        // Represents function `setupAdaptor(address adaptor)`
        SetupAdaptor setup_adaptor = 5;
    }

    // Represents function `initiateShutdown()`
    message InitiateShutdown {
    }

    // Represents function `liftShutdown()`
    message LiftShutdown {
    }

    // Represents function `setPlatformFee(uint64)`
    message SetPlatformFee {
        // New platform fee
        uint64 amount = 1;
    }

    // Represents function `setStrategistPlatformCut(uint64)`
    message SetStrategistPlatformCut {
        // New strategist platform cut
        uint64 amount = 1;
    }

    /*
    * Allows owner to add new adaptors for the cellar to use.
    *
    * Represents function `setupAdaptor(address adaptor)`
    */
    message SetupAdaptor {
        // Address of the adaptor
        string adaptor = 1;
    }
}

message CellarV2_2 {
    oneof call_type {
        // Represents a single function call
        FunctionCall function_call = 1;
        // Represents multiple, ordered function calls
        Multicall multicall = 2;
    }

    // The function you wish to execute on the target cellar
    message FunctionCall {
        oneof function {
            // Represents function `addPosition(uint256 index, address position)`
            AddPosition add_position = 1;
            // Represents function `callOnAdaptor(AdaptorCall[] memory data)`
            CallOnAdaptor call_on_adaptor = 2;
            // Represents function `removePosition(uint256 index, bool inDebtArray)`
            RemovePosition remove_position = 3;
            // Represents function `removeAdaptorFromCatalogue(address adaptor)`
            RemoveAdaptorFromCatalogue remove_adaptor_from_catalogue = 4;
            // Represents function `removePositionFromCatalogue(uint32 positionId)`
            RemovePositionFromCatalogue remove_position_from_catalogue = 5;
            // Represents function `setHoldingPosition(uint32 position_id)`
            SetHoldingPosition set_holding_position = 6;
            // Represents function `setStrategistPayoutAddress(address payout)`
            SetStrategistPayoutAddress set_strategist_payout_address = 7;
            // Represents function `swapPositions(uint256 index1, uint256 index2)`
            SwapPositions swap_positions = 8;
        }
    }

    /*
    * Insert a trusted position to the list of positions used by the cellar at a given index.
    *
    * Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
    */
    message AddPosition {
        // Index at which to add the position
        uint32 index = 1;
        // The position's ID in the cellar registry
        uint32 position_id = 2;
        // Data used to configure how the position behaves
        bytes configuration_data = 3;
        // Whether to add position in the debt array, or the credit array.
        bool in_debt_array = 4;
    }

    /*
    * Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
    *
    * Represents function `callOnAdaptor(AdaptorCall[] memory data)`
    */
    message CallOnAdaptor {
        repeated AdaptorCall data = 1;
    }

    /*
    * Remove the position at a given index from the list of positions used by the cellar.
    *
    * Represents function `removePosition(uint32 index, bool inDebtArray)`
    */
    message RemovePosition {
        // Index at which to remove the position
        uint32 index = 1;
        // Whether to remove position from the debt array, or the credit array.
        bool in_debt_array = 2;
    }

    /*
    * Allows callers to remove adaptors from this cellar's catalogue
    *
    * Represents function `removeAdaptorFromCatalogue(address adaptor)`
    */
    message RemoveAdaptorFromCatalogue {
        string adaptor = 1;
    }

    /*
    * Allows caller to remove positions from this cellar's catalogue
    *
    * Represents function `removePositionFromCatalogue(uint32 positionId)`
    */
    message RemovePositionFromCatalogue {
        uint32 position_id = 1;
    }

    /*
    * Set the holding position used of the cellar.
    *
    * Represents function `setHoldingIndex(uint8 index)`
    */
    message SetHoldingPosition {
        // ID (index) of the new holding position to use
        uint32 position_id = 1;
    }

    /*
    * Sets the Strategists payout address.
    *
    * Represents function `setStrategistPayoutAddress(address payout)`
    */
    message SetStrategistPayoutAddress {
        string payout = 1;
    }

    /*
    * Swap the positions at two given indeces.
    *
    * Represents function `swapPositions(uint32 index1, uint32 index2)`
    */
    message SwapPositions {
        // Index of the first position
        uint32 index_1 = 1;
        // Index of the second position
        uint32 index_2 = 2;
        // Whether to switch positions in the debt array, or the credit array.
        bool in_debt_array = 3;
    }

    /*
    * Allows caller to call multiple functions in a single TX.
    *
    * Represents function `multicall(bytes[] data)`
    */
    message Multicall {
        repeated FunctionCall function_calls = 1;
    }
}

/*
* Represent a function call initiated through a governance proposal
*/
message CellarV2_2Governance {
    // The function to call on the target cellar
    oneof function {
        // Represents function `addAdaptorToCatalogue(address adaptor)`
        AddAdaptorToCatalogue add_adaptor_to_catalogue = 1;
        // Represents function `addPositionToCatalogue(uint32 positionId)`
        AddPositionToCatalogue add_position_to_catalogue = 2;
        // Represents function `setRebalanceDeviation(uint265)`
        SetRebalanceDeviation set_rebalance_deviation = 3;
        // Represents function `setShareLockPeriod(uint256 newLock)`
        SetShareLockPeriod set_share_lock_period = 4;
        // Represents function `setStrategistPlatformCut(uint64 cut)`
        SetStrategistPlatformCut set_strategist_platform_cut = 5;
        // Represents function `initiateShutdown()`
        InitiateShutdown initiate_shutdown = 6;
        // Represents function `liftShutdown()`
        LiftShutdown lift_shutdown = 7;
        // Represents function `forcePositionOut(uint32 index, uint32 positionId, bool inDebtArray)`
        ForcePositionOut force_position_out = 8;
        // Represents function `toggleIgnorePause(bool ignore)`
        ToggleIgnorePause toggle_ignore_pause = 9;
    }

    /*
    * Allows the owner to add an adaptor to the Cellar's adaptor catalogue
    *
    * Represents function `addAdaptorToCatalogue(address adaptor)`
    */
    message AddAdaptorToCatalogue {
        string adaptor = 1;
    }

    /*
    * Allows the owner to add a position to the Cellar's position catalogue
    *
    * Represents function `addPositionToCatalogue(uint32 positionId)`
    */
    message AddPositionToCatalogue {
        uint32 position_id = 1;
    }

    /*
    * Allows share lock period to be updated.
    *
    * Represents function `setShareLockPeriod()`
    */
    message SetShareLockPeriod {
        string new_lock = 1;
    }

    /*
    * Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
    * during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
    *
    * Represents function `setRebalanceDeviation(uint256)`
    */
    message SetRebalanceDeviation {
        string new_deviation = 1;
    }

    /*
    * Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.
    *
    * Represents function `initiateShutdown()`
    */
    message InitiateShutdown {}

    /*
    * Allows strategist to set the platform cut for the cellar.
    *
    * Represents function `setStrategistPlatformCut(uint64 cut)`
    */
    message SetStrategistPlatformCut {
        // The new strategist platform cut
        uint64 new_cut = 1;
    }

    /*
    * Allows the owner to restart a shut down Cellar
    *
    * Represents function `liftShutdown()`
    */
    message LiftShutdown {}

    /*
    * Allows caller to force a position out of the cellar
    *
    * Represents function `forcePositionOut(uint32 index, uint32 positionId, bool inDebtArray)`
    */
    message ForcePositionOut {
        uint32 index = 1;
        uint32 position_id = 2;
        bool in_debt_array = 3;
    }

    /*
    * Allows caller to toggle the ignorePause flag on the cellar
    *
    * Represents function `toggleIgnorePause(bool ignore)`
    */
    message ToggleIgnorePause {
        bool ignore = 1;
    }
}

// Represents a call to adaptor an. The cellar must be authorized to call the target adaptor.
message AdaptorCall {
    // Address of the adaptor
    string adaptor = 1;
    // The function call data for the adaptor
    oneof call_data {
        // Represents function calls to the AaveATokenAdaptor V1
        AaveATokenAdaptorV1Calls aave_a_token_v1_calls = 3;
        // Represents function calls to the AavaDebtTokenAdaptor V1
        AaveDebtTokenAdaptorV1Calls aave_debt_token_v1_calls = 4;
        // Represents function calls to the CompoundCTokenAdaptor V2
        CompoundCTokenAdaptorV2Calls compound_c_token_v2_calls = 5;
        // Represents function calls to the AaveATokenV2Adaptor
        AaveATokenAdaptorV2Calls aave_a_token_v2_calls = 6;
        // Represents function calls to the AavaDebtTokenV2Adaptor
        AaveDebtTokenAdaptorV2Calls aave_debt_token_v2_calls = 7;
        // Represents function calls to the AaveATokenV1Adaptor
        AaveV3ATokenAdaptorV1Calls aave_v3_a_token_v1_calls = 8;
        // Represents function calls to the AavaDebtTokenV1Adaptor
        AaveV3DebtTokenAdaptorV1Calls aave_v3_debt_token_v1_calls = 9;
        // Represents function calls to the OneInchAdaptorV1
        OneInchAdaptorV1Calls one_inch_v1_calls = 10;
        // Represents function calls to the FeesAndReservesAdaptorV1
        FeesAndReservesAdaptorV1Calls fees_and_reserves_v1_calls = 11;
        // Represents functionc alls to the ZeroXAdaptorV1
        ZeroXAdaptorV1Calls zero_x_v1_calls = 12;
        // Represents function calls to the SwapWithUniswapAdaptorV1
        SwapWithUniswapAdaptorV1Calls swap_with_uniswap_v1_calls = 13;
        // Represents function calls to VestingSimpleAdaptor
        VestingSimpleAdaptorV2Calls vesting_simple_v2_calls = 14;
        // Represents function calls to the CellarAdaptor
        CellarAdaptorV1Calls cellar_v1_calls = 15;
        // Represents function calls to the UniswapV3Adaptor V2
        UniswapV3AdaptorV2Calls uniswap_v3_v2_calls = 16;
        // Represents function calls to the AaveV2EnableAssetAsCollatorAdaptor V1
        AaveV2EnableAssetAsCollateralAdaptorV1Calls aave_v2_enable_asset_as_collateral_v1_calls = 17;
        // Represents function calls to the FTokenAdaptor V1
        FTokenAdaptorV1Calls f_token_v1_calls = 18;
        // Represents function calls to the MorphoAaveV2AToken V1
        MorphoAaveV2ATokenAdaptorV1Calls morpho_aave_v2_a_token_v1_calls = 19;
        // Represents function calls to the MorphoAaveV2DebtToken V1
        MorphoAaveV2DebtTokenAdaptorV1Calls morpho_aave_v2_debt_token_v1_calls = 20;
        // Represents function calls to the MorphoAaveV3ATokenCollateral V1
        MorphoAaveV3ATokenCollateralAdaptorV1Calls morpho_aave_v3_a_token_collateral_v1_calls = 21;
        // Represents function calls to the MorphoAaveV3ATokenP2P V1
        MorphoAaveV3ATokenP2PAdaptorV1Calls morpho_aave_v3_a_token_p2p_v1_calls = 22;
        // Represents function calls to the MorphoAaveV3DebtToken V1
        MorphoAaveV3DebtTokenAdaptorV1Calls morpho_aave_v3_debt_token_v1_calls = 23;
    }
}
