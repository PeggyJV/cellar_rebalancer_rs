syntax = "proto3";
package steward.v3;

option go_package = "/steward_proto";

// Represents call data for the Aave Debt Token adaptor, used for borrowing and repaying debt on Aave.
message AaveDebtTokenAdaptor {
    oneof function {
        // Represents function `borrowFromAave(ERC20 debtTokenToBorrow, uint256 amountToBorrow)`
        BorrowFromAave deposit_to_aave = 1;
        // Represents function `repayAaveDebt(ERC20 tokenToRepay, uint256 amountToRepay)`
        RepayAaveDebt withdraw_from_aave = 2;
        // Represents function `swapAndRepay(ERC20 tokenIn, ERC20 tokenToRepay, uint256 amountIn, SwapRouter.Exchange exchange, bytes memory params)`
        SwapAndRepay swap_and_repay = 3;
        // Represents function `flashLoan(address[] memory loanToken, uint256[] memory loanAmount, bytes memory params)`
        FlashLoan flash_loan = 4;
    }

    /*
    * Allows strategists to borrow assets from Aave.
    *
    * Represents function `depositToAave(ERC20 tokenToDeposit, uint256 amountToDeposit)`
    */
    message BorrowFromAave {
        // The address of the ERC20 token to borrow
        string token = 1;
        // The amount to borrow
        string amount = 2;
    }

    /*
    * Allows strategists to repay loan debt on Aave.
    *
    * Represents function `repayAaveDebt(ERC20 tokenToRepay, uint256 amountToRepay)`
    */
    message RepayAaveDebt {
        // The address of the ERC20 token to repay
        string token = 1;
        // The amount to repay
        string amount = 2;
    }

    /*
    * Allows strategists to swap assets and repay loans in one call.
    *
    * Represents function `swapAndRepay(ERC20 tokenIn, ERC20 tokenToRepay, uint256 amountIn, SwapRouter.Exchange exchange, bytes memory params)`
    */
    message SwapAndRepay {
        // The address of the token to swap from
        string token_in = 1;
        // The address of the token to swap to and repay with
        string token_to_repay = 2;
        // The amount to swap
        string amount_in = 3;
        // The exchange to make the swap on
        Exchange exchange = 4;
        // TODO: Add params. Nested bytes within bytes.
    }

    /*
    * Allows strategists to have cellars take out flash loans.
    *
    * Represents function `flashLoan(address[] memory loanToken, uint256[] memory loanAmount, bytes memory params)`
    */
    message FlashLoan {
        // Address array of tokens to take out loans for
        repeated string loan_tokens = 1;
        // uint256 array of loan amounts for each loan token
        repeated string amounts = 2;
        // TODO: Add params. Nested bytes within bytes. https://docs.aave.com/developers/v/2.0/the-core-protocol/lendingpool#flashloan
    }
}
