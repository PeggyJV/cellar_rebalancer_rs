/*
* Protos for function calls to the Aave Debt V3 Token adaptor.
*/

syntax = "proto3";
package steward.v3;

option go_package = "/steward_proto";

import "adaptors/aave/a_token.proto";
import "adaptors/aave/debt_token.proto";
import "adaptors/aave/aave_v3_a_token.proto";
import "adaptors/compound/c_token.proto";
import "adaptors/uniswap/uniswap_v3.proto";
import "adaptors/uniswap/swap_with_uniswap.proto";
import "adaptors/fees_and_reserves.proto";
import "adaptors/0x/zero_x.proto";
import "adaptors/1inch/oneinch.proto";
import "adaptors/vesting_simple.proto";
import "adaptors/base.proto";
import "adaptors/sommelier/cellar_adaptor.proto";

// Represents call data for the Aave Debt Token adaptor, used for borrowing and repaying debt on Aave.
message AaveV3DebtTokenAdaptorV1 {
    oneof function {
        /***** BASE ADAPTOR FUNCTIONS *****/

        // Represents function `revokeApproval(ERC20 asset, address spender)`
        RevokeApproval revoke_approval = 1;

        /***** ADAPTOR-SPECIFIC FUNCTIONS *****/

        // Represents function `borrowFromAave(ERC20 debtTokenToBorrow, uint256 amountToBorrow)`
        BorrowFromAave borrow_from_aave = 2;
        // Represents function `repayAaveDebt(ERC20 tokenToRepay, uint256 amountToRepay)`
        RepayAaveDebt repay_aave_debt = 3;
        // Represents function `repayWithATokens(ERC20 underlying, uint256 amount)`
        RepayWithATokens repay_with_a_tokens = 4;
        // Represents function `flashLoan(address[] loanToken, uint256[] loanAmount, bytes params)`
        FlashLoan flash_loan = 5;
    }

    /*
    * Allows strategists to borrow assets from Aave.
    *
    * Represents function `depositToAave(ERC20 tokenToDeposit, uint256 amountToDeposit)`
    */
    message BorrowFromAave {
        // The address of the ERC20 token to borrow
        string token = 1;
        // The amount to borrow
        string amount = 2;
    }

    /*
    * Allows strategists to repay loan debt on Aave.
    *
    * Represents function `repayAaveDebt(ERC20 tokenToRepay, uint256 amountToRepay)`
    */
    message RepayAaveDebt {
        // The address of the ERC20 token to repay
        string token = 1;
        // The amount to repay
        string amount = 2;
    }

    /*
    * Allows strategist to use aTokens to repay debt tokens with the same underlying.
    *
    * Represents function `repayWithATokens(ERC20 underlying, uint256 amount)`
    */
    message RepayWithATokens {
        // The address of the underlying ERC20 token to repay
        string underlying_token = 1;
        // The amount to repay
        string amount = 2;
    }

    /*
    * Allows strategists to have Cellars take out flash loans
    *
    * Represents function `flashLoan(address[] loanToken, uint256[] loanAmount, bytes params)`
    */
    message FlashLoan {
        // The addresses of the ERC20 tokens to borrow
        repeated string loan_tokens = 1;
        // The amounts to borrow
        repeated string loan_amounts = 2;
        // The params to pass to the flash loan callback.
        repeated AdaptorCallForAaveV3Flashloan params = 3;
    }

    // NOTE: FlashLoan takes an array of AdaptorCall. cellar_v2.proto defines it, but also imports this file, therefore we can't import cellar_v2.proto in order to use the AdaptorCall message here. To avoid the recursive import, we duplicate the message definition.

    // Represents a call to adaptor an. The cellar must be authorized to call the target adaptor.
    message AdaptorCallForAaveV3Flashloan {
        // Address of the adaptor
        string adaptor = 1;
        // The function call data for the adaptor
        oneof call_data {
            // Represents function calls to the UniswapV3Adaptor V1
            UniswapV3AdaptorV1Calls uniswap_v3_v1_calls = 2;
            // Represents function calls to the AaveATokenAdaptor V1
            AaveATokenAdaptorV1Calls aave_a_token_v1_calls = 3;
            // Represents function calls to the AavaDebtTokenAdaptor V1
            AaveDebtTokenAdaptorV1Calls aave_debt_token_v1_calls = 4;
            // Represents function calls to the CompoundCTokenAdaptor V2
            CompoundCTokenAdaptorV2Calls compound_c_token_v2_calls = 5;
            // Represents function calls to the AaveATokenV2Adaptor
            AaveATokenAdaptorV2Calls aave_a_token_v2_calls = 6;
            // Represents function calls to the AavaDebtTokenV2Adaptor
            AaveDebtTokenAdaptorV2Calls aave_debt_token_v2_calls = 7;
            // Represents function calls to the AaveATokenV1Adaptor
            AaveV3ATokenAdaptorV1Calls aave_v3_a_token_v1_calls = 8;
            // Represents function calls to the AavaDebtTokenV1Adaptor
            AaveV3DebtTokenAdaptorV1Calls aave_v3_debt_token_v1_calls = 9;
            // Represents function calls to the OneInchAdaptorV1
            OneInchAdaptorV1Calls one_inch_v1_calls = 10;
            // Represents function calls to the FeesAndReservesAdaptorV1
            FeesAndReservesAdaptorV1Calls fees_and_reserves_v1_calls = 11;
            // Represents functionc alls to the ZeroXAdaptorV1
            ZeroXAdaptorV1Calls zero_x_v1_calls = 12;
            // Represents function calls to the SwapWithUniswapAdaptorV1
            SwapWithUniswapAdaptorV1Calls swap_with_uniswap_v1_calls = 13;
            // Represents function calls to VestingSimpleAdaptor
            VestingSimpleAdaptorV2Calls vesting_simple_v2_calls = 14;
            // Represents function calls to the CellarAdaptor
            CellarAdaptorV1Calls cellar_v1_calls = 15;
            // Represents function calls to the UniswapV3Adaptor V2
            UniswapV3AdaptorV2Calls uniswap_v3_v2_calls = 16;
        }
    }
}

message AaveV3DebtTokenAdaptorV1Calls {
    repeated AaveV3DebtTokenAdaptorV1 calls = 1;
}
