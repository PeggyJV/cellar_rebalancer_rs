/*
* Protos for function calls to the Balancer Pool adaptor.
*/

syntax = "proto3";
package steward.v3;

option go_package = "/steward_proto";

import "adaptors/base.proto";
import "adaptors/aave/a_token.proto";
import "adaptors/aave/debt_token.proto";
import "adaptors/aave/aave_v3_a_token.proto";
import "adaptors/aave/aave_v3_debt_token.proto";
import "adaptors/compound/c_token.proto";
import "adaptors/frax/f_token.proto";
import "adaptors/morpho/morpho_aave_v2_a_token.proto";
import "adaptors/morpho/morpho_aave_v2_debt_token.proto";
import "adaptors/morpho/morpho_aave_v3_a_token_collateral.proto";
import "adaptors/morpho/morpho_aave_v3_a_token_p2p.proto";
import "adaptors/morpho/morpho_aave_v3_debt_token.proto";
import "adaptors/uniswap/uniswap_v3.proto";
import "adaptors/uniswap/swap_with_uniswap.proto";
import "adaptors/fees_and_reserves.proto";
import "adaptors/zero_x/zero_x.proto";
import "adaptors/oneinch/oneinch.proto";
import "adaptors/vesting_simple.proto";
import "adaptors/sommelier/cellar_adaptor.proto";
import "adaptors/aave/aave_v2_enable_asset_as_collateral_adaptor.proto";
import "adaptors/sommelier/legacy_cellar_adaptor.proto";
import "adaptors/frax/debt_f_token.proto";
import "adaptors/frax/collateral_f_token.proto";

// Represents call data for the Balancer Pool adaptor V1, for managing pool positions on Balancer.
message BalancerPoolAdaptorV1 {
    oneof function {
        /***** BASE ADAPTOR FUNCTIONS *****/

        // Represents function `revokeApproval(ERC20 asset, address spender)`
        RevokeApproval revoke_approval = 1;

        /***** ADAPTOR-SPECIFIC FUNCTIONS *****/

        // Represents function `relayerJoinPool(ERC20[] tokensIn, uint256[] amountsIn, ERC20 btpOut, bytes[] memory callData)`
        JoinPool join_pool = 2;
        // Represents function `relayerExitPool(ERC20 bptIn, uint256 amountIn, ERC20[] memory tokensOut, bytes[] memory callData)`
        ExitPool exit_pool = 3;
        // Represents function `stakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountIn)`
        StakeBPT stake_bpt = 4;
        // Represents function `unstakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountOut)`
        UnstakeBPT unstake_bpt = 5;
        // Represents function `claimRewards(address gauge)`
        ClaimRewards claim_rewards = 6;
        // Represents function `makeFlashLoan(IERC20[] tokens, uint256[] amounts, bytes memory data)`
        MakeFlashLoan make_flash_loan = 7;
    }

    // Represents the SwapKind enum defined here:
    // https://github.com/PeggyJV/cellar-contracts/blob/main/src/interfaces/external/Balancer/IVault.sol
    enum SwapKind {
        SWAP_KIND_UNSPECIFIED = 0;
        SWAP_KIND_GIVEN_IN = 1;
        SWAP_KIND_GIVEN_OUT = 2;
    }

    // Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on the `kind` value.
    // Represents the SingleSwap struct defined here:
    // https://github.com/PeggyJV/cellar-contracts/blob/main/src/interfaces/external/Balancer/IVault.sol
    message SingleSwap {
        // The pool ID (bytes32)
        string pool_id = 1;

        // The swap kind (enum)
        SwapKind kind = 2;

        // The asset in (address)
        string asset_in = 3;

        // The asset out (address)
        string asset_out = 4;

        // The amount (uint256)
        string amount = 5;

        // The user data (bytes)
        bytes user_data = 6;
    }

    // Stores each swaps min amount, and deadline
    message SwapData {
        // The minimum amounts for swaps
        repeated string min_amounts_for_swaps = 1;

        // The swap deadlines
        repeated string swap_deadlines = 2;
    }

    /*
    * Allows strategists to join Balancer pools using EXACT_TOKENS_IN_FOR_BPT_OUT joins
    *
    * Represents function `joinPool(ERC20 targetBpt, IVault.SingleSwap[] memory swapsBeforeJoin, SwapData memory swapData, uint256 minimumBpt)`
    */
    message JoinPool {
        // The target pool
        string target_bpt = 1;

        // Swap to execute before joining pool
        repeated SingleSwap swaps_before_join = 2;

        // Data for swaps
        SwapData swap_data = 3;

        // The minimum BPT to mint
        string minimum_bpt = 4;
    }


    message ExitPoolRequest {
        repeated string assets = 1;
        repeated string min_amounts_out = 2;
        bytes user_data = 3;
        bool to_internal_balance = 4;
    }

    /*
    * Call `BalancerRelayer` on mainnet to carry out exit txs
    *
    * Represents function `exitPool(ERC20 targetBpt, IVault.SingleSwap[] memory swapsBeforeJoin, SwapData memory swapData, IVault.ExitPoolRequest request)`
    */
    message ExitPool {
        // The target pool
        string target_bpt = 1;

        // Swaps to execute after exiting pool
        repeated SingleSwap swaps_after_exit = 2;

        // Data for swaps
        SwapData swap_data = 3;

        ExitPoolRequest request = 4;
    }

    /*
    * Stake (deposit) BPTs into respective pool gauge
    *
    * Represents `function stakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountIn)``
    */
    message StakeBPT {
        // The BPT to stake
        string bpt = 1;

        // The liquidity gauge to stake into
        string liquidity_gauge = 2;

        // The amount to stake
        string amount_in = 3;
    }

    /*
    * Unstake (withdraw) BPT from respective pool gauge
    *
    * Represents `function unstakeBPT(ERC20 _bpt, address _liquidityGauge, uint256 _amountOut)``
    */
    message UnstakeBPT {
        // The BPT to unstake
        string bpt = 1;

        // The liquidity gauge to unstake from
        string liquidity_gauge = 2;

        // The amount to unstake
        string amount_out = 3;
    }

    /*
    * Claim rewards ($BAL) from LP position
    *
    * Represents `function claimRewards(address gauge)`
    */
    message ClaimRewards {
        // The gauge to claim rewards from
        string gauge = 1;
    }

    /*
    * Make a flash loan
    *
    * Represents `function makeFlashLoan(IERC20[] tokens, uint256[] amounts, bytes memory data)`
    */
    message MakeFlashLoan {
        // The tokens to flash loan
        repeated string tokens = 1;

        // The amounts to flash loan
        repeated string amounts = 2;

        // The data to flash loan
        repeated AdaptorCallForBalancerFlashloan data = 3;
    }

    message AdaptorCallForBalancerFlashloan {
        // Address of the adaptor
        string adaptor = 1;
        // The function call data for the adaptor
        oneof call_data {
            // Represents function calls to the UniswapV3Adaptor V1
            UniswapV3AdaptorV1Calls uniswap_v3_v1_calls = 2;
            // Represents function calls to the AaveATokenAdaptor V1
            AaveATokenAdaptorV1Calls aave_a_token_v1_calls = 3;
            // Represents function calls to the AavaDebtTokenAdaptor V1
            AaveDebtTokenAdaptorV1Calls aave_debt_token_v1_calls = 4;
            // Represents function calls to the CompoundCTokenAdaptor V2
            CompoundCTokenAdaptorV2Calls compound_c_token_v2_calls = 5;
            // Represents function calls to the AaveATokenV2Adaptor
            AaveATokenAdaptorV2Calls aave_a_token_v2_calls = 6;
            // Represents function calls to the AavaDebtTokenV2Adaptor
            AaveDebtTokenAdaptorV2Calls aave_debt_token_v2_calls = 7;
            // Represents function calls to the AaveATokenV1Adaptor
            AaveV3ATokenAdaptorV1Calls aave_v3_a_token_v1_calls = 8;
            // Represents function calls to the AavaDebtTokenV1Adaptor
            AaveV3DebtTokenAdaptorV1Calls aave_v3_debt_token_v1_calls = 9;
            // Represents function calls to the OneInchAdaptorV1
            OneInchAdaptorV1Calls one_inch_v1_calls = 10;
            // Represents function calls to the FeesAndReservesAdaptorV1
            FeesAndReservesAdaptorV1Calls fees_and_reserves_v1_calls = 11;
            // Represents functionc alls to the ZeroXAdaptorV1
            ZeroXAdaptorV1Calls zero_x_v1_calls = 12;
            // Represents function calls to the SwapWithUniswapAdaptorV1
            SwapWithUniswapAdaptorV1Calls swap_with_uniswap_v1_calls = 13;
            // Represents function calls to VestingSimpleAdaptor
            VestingSimpleAdaptorV2Calls vesting_simple_v2_calls = 14;
            // Represents function calls to the CellarAdaptor
            CellarAdaptorV1Calls cellar_v1_calls = 15;
            // Represents function calls to the UniswapV3Adaptor V2
            UniswapV3AdaptorV2Calls uniswap_v3_v2_calls = 16;
            // Represents function calls to the AaveV2EnableAssetAsCollatorAdaptor V1
            AaveV2EnableAssetAsCollateralAdaptorV1Calls aave_v2_enable_asset_as_collateral_v1_calls = 17;
            // Represents function calls to the FTokenAdaptor V1
            FTokenAdaptorV1Calls f_token_v1_calls = 18;
            // Represents function calls to the MorphoAaveV2AToken V1
            MorphoAaveV2ATokenAdaptorV1Calls morpho_aave_v2_a_token_v1_calls = 19;
            // Represents function calls to the MorphoAaveV2DebtToken V1
            MorphoAaveV2DebtTokenAdaptorV1Calls morpho_aave_v2_debt_token_v1_calls = 20;
            // Represents function calls to the MorphoAaveV3ATokenCollateral V1
            MorphoAaveV3ATokenCollateralAdaptorV1Calls morpho_aave_v3_a_token_collateral_v1_calls = 21;
            // Represents function calls to the MorphoAaveV3ATokenP2P V1
            MorphoAaveV3ATokenP2PAdaptorV1Calls morpho_aave_v3_a_token_p2p_v1_calls = 22;
            // Represents function calls to the MorphoAaveV3DebtToken V1
            MorphoAaveV3DebtTokenAdaptorV1Calls morpho_aave_v3_debt_token_v1_calls = 23;
            // Represents function calls to the BalancerPoolAdaptor V1
            BalancerPoolAdaptorV1Calls balancer_pool_v1_calls = 24;
            // Represents function calls to the LegacyCellarAdaptor V1
            LegacyCellarAdaptorV1Calls legacy_cellar_v1_calls = 25;
            // Represents function calls to the DebtFTokenAdaptor V1
            DebtFTokenAdaptorV1Calls debt_f_token_v1_calls = 26;
            // Represents function calls to the CollateralFTokenAdaptor V1
            CollateralFTokenAdaptorV1Calls collateral_f_token_v1_calls = 27;
        }
    }
}

message BalancerPoolAdaptorV1Calls {
    repeated BalancerPoolAdaptorV1 calls = 1;
}
