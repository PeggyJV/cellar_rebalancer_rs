//
// An API for cellars that implement V2 of the EIP4626-compatible Cellar.sol contract.
//
// See [Cellar.sol](https://github.com/PeggyJV/cellar-contracts/blob/main/src/base/Cellar.sol)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: cellar_v2.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Represents a function call to a cellar that implements Cellar.sol
type CellarV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function you wish to execute on the target cellar
	//
	// Types that are assignable to Function:
	//	*CellarV2_AddPosition_
	//	*CellarV2_CallOnAdaptor_
	//	*CellarV2_RemovePosition_
	//	*CellarV2_SetHoldingPosition_
	//	*CellarV2_SetStrategistPayoutAddress_
	//	*CellarV2_SwapPositions_
	//	*CellarV2_SetRebalanceDeviation_
	//	*CellarV2_SetShareLockPeriod_
	//	*CellarV2_SetupAdaptor_
	//	*CellarV2_SetPlatformFee_
	//	*CellarV2_InitiateShutdown_
	//	*CellarV2_LiftShutdown_
	Function isCellarV2_Function `protobuf_oneof:"function"`
}

func (x *CellarV2) Reset() {
	*x = CellarV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2) ProtoMessage() {}

func (x *CellarV2) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2.ProtoReflect.Descriptor instead.
func (*CellarV2) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0}
}

func (m *CellarV2) GetFunction() isCellarV2_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2) GetAddPosition() *CellarV2_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_AddPosition_); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2) GetCallOnAdaptor() *CellarV2_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_CallOnAdaptor_); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2) GetRemovePosition() *CellarV2_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_RemovePosition_); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV2) GetSetHoldingPosition() *CellarV2_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_SetHoldingPosition_); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2) GetSetStrategistPayoutAddress() *CellarV2_SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*CellarV2_SetStrategistPayoutAddress_); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *CellarV2) GetSwapPositions() *CellarV2_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV2_SwapPositions_); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *CellarV2) GetSetRebalanceDeviation() *CellarV2_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_SetRebalanceDeviation_); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

func (x *CellarV2) GetSetShareLockPeriod() *CellarV2_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV2_SetShareLockPeriod_); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

func (x *CellarV2) GetSetupAdaptor() *CellarV2_SetupAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_SetupAdaptor_); ok {
		return x.SetupAdaptor
	}
	return nil
}

func (x *CellarV2) GetSetPlatformFee() *CellarV2_SetPlatformFee {
	if x, ok := x.GetFunction().(*CellarV2_SetPlatformFee_); ok {
		return x.SetPlatformFee
	}
	return nil
}

func (x *CellarV2) GetInitiateShutdown() *CellarV2_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2_InitiateShutdown_); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2) GetLiftShutdown() *CellarV2_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2_LiftShutdown_); ok {
		return x.LiftShutdown
	}
	return nil
}

type isCellarV2_Function interface {
	isCellarV2_Function()
}

type CellarV2_AddPosition_ struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_AddPosition `protobuf:"bytes,1,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_CallOnAdaptor_ struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_CallOnAdaptor `protobuf:"bytes,2,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_RemovePosition_ struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *CellarV2_RemovePosition `protobuf:"bytes,3,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV2_SetHoldingPosition_ struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_SetHoldingPosition `protobuf:"bytes,4,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_SetStrategistPayoutAddress_ struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *CellarV2_SetStrategistPayoutAddress `protobuf:"bytes,5,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type CellarV2_SwapPositions_ struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV2_SwapPositions `protobuf:"bytes,6,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type CellarV2_SetRebalanceDeviation_ struct {
	// Represents function `setRebalanceDeviation(uint265)`
	SetRebalanceDeviation *CellarV2_SetRebalanceDeviation `protobuf:"bytes,7,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

type CellarV2_SetShareLockPeriod_ struct {
	// Represents function `setShareLockPeriod(uint256 newLock)`
	SetShareLockPeriod *CellarV2_SetShareLockPeriod `protobuf:"bytes,8,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

type CellarV2_SetupAdaptor_ struct {
	// Represents function `setupAdaptor(address _adaptor)`
	SetupAdaptor *CellarV2_SetupAdaptor `protobuf:"bytes,9,opt,name=setup_adaptor,json=setupAdaptor,proto3,oneof"`
}

type CellarV2_SetPlatformFee_ struct {
	// Represents function `setPlatformFee(uint64 platformFee)`
	SetPlatformFee *CellarV2_SetPlatformFee `protobuf:"bytes,10,opt,name=set_platform_fee,json=setPlatformFee,proto3,oneof"`
}

type CellarV2_InitiateShutdown_ struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2_InitiateShutdown `protobuf:"bytes,11,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2_LiftShutdown_ struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2_LiftShutdown `protobuf:"bytes,12,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

func (*CellarV2_AddPosition_) isCellarV2_Function() {}

func (*CellarV2_CallOnAdaptor_) isCellarV2_Function() {}

func (*CellarV2_RemovePosition_) isCellarV2_Function() {}

func (*CellarV2_SetHoldingPosition_) isCellarV2_Function() {}

func (*CellarV2_SetStrategistPayoutAddress_) isCellarV2_Function() {}

func (*CellarV2_SwapPositions_) isCellarV2_Function() {}

func (*CellarV2_SetRebalanceDeviation_) isCellarV2_Function() {}

func (*CellarV2_SetShareLockPeriod_) isCellarV2_Function() {}

func (*CellarV2_SetupAdaptor_) isCellarV2_Function() {}

func (*CellarV2_SetPlatformFee_) isCellarV2_Function() {}

func (*CellarV2_InitiateShutdown_) isCellarV2_Function() {}

func (*CellarV2_LiftShutdown_) isCellarV2_Function() {}

type CellarV2_2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallType:
	//	*CellarV2_2_FunctionCall_
	//	*CellarV2_2_Multicall_
	CallType isCellarV2_2_CallType `protobuf_oneof:"call_type"`
}

func (x *CellarV2_2) Reset() {
	*x = CellarV2_2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2) ProtoMessage() {}

func (x *CellarV2_2) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2.ProtoReflect.Descriptor instead.
func (*CellarV2_2) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1}
}

func (m *CellarV2_2) GetCallType() isCellarV2_2_CallType {
	if m != nil {
		return m.CallType
	}
	return nil
}

func (x *CellarV2_2) GetFunctionCall() *CellarV2_2_FunctionCall {
	if x, ok := x.GetCallType().(*CellarV2_2_FunctionCall_); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *CellarV2_2) GetMulticall() *CellarV2_2_Multicall {
	if x, ok := x.GetCallType().(*CellarV2_2_Multicall_); ok {
		return x.Multicall
	}
	return nil
}

type isCellarV2_2_CallType interface {
	isCellarV2_2_CallType()
}

type CellarV2_2_FunctionCall_ struct {
	// Represents a single function call
	FunctionCall *CellarV2_2_FunctionCall `protobuf:"bytes,1,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type CellarV2_2_Multicall_ struct {
	// Represents multiple, ordered function calls
	Multicall *CellarV2_2_Multicall `protobuf:"bytes,2,opt,name=multicall,proto3,oneof"`
}

func (*CellarV2_2_FunctionCall_) isCellarV2_2_CallType() {}

func (*CellarV2_2_Multicall_) isCellarV2_2_CallType() {}

// Represents a call to adaptor an. The cellar must be authorized to call the target adaptor.
type AdaptorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the adaptor
	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
	// The function call data for the adaptor
	//
	// Types that are assignable to CallData:
	//	*AdaptorCall_UniswapV3V1Calls
	//	*AdaptorCall_AaveATokenV1Calls
	//	*AdaptorCall_AaveDebtTokenV1Calls
	//	*AdaptorCall_CompoundCTokenV2Calls
	//	*AdaptorCall_AaveATokenV2Calls
	//	*AdaptorCall_AaveDebtTokenV2Calls
	//	*AdaptorCall_AaveV3ATokenV1Calls
	//	*AdaptorCall_AaveV3DebtTokenV1Calls
	//	*AdaptorCall_OneInchV1Calls
	//	*AdaptorCall_FeesAndReservesV1Calls
	//	*AdaptorCall_ZeroXV1Calls
	//	*AdaptorCall_SwapWithUniswapV1Calls
	//	*AdaptorCall_VestingSimpleV2Calls
	//	*AdaptorCall_CellarV1Calls
	//	*AdaptorCall_UniswapV3V2Calls
	CallData isAdaptorCall_CallData `protobuf_oneof:"call_data"`
}

func (x *AdaptorCall) Reset() {
	*x = AdaptorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptorCall) ProtoMessage() {}

func (x *AdaptorCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptorCall.ProtoReflect.Descriptor instead.
func (*AdaptorCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{2}
}

func (x *AdaptorCall) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

func (m *AdaptorCall) GetCallData() isAdaptorCall_CallData {
	if m != nil {
		return m.CallData
	}
	return nil
}

func (x *AdaptorCall) GetUniswapV3V1Calls() *UniswapV3AdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_UniswapV3V1Calls); ok {
		return x.UniswapV3V1Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveATokenV1Calls() *AaveATokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveATokenV1Calls); ok {
		return x.AaveATokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveDebtTokenV1Calls() *AaveDebtTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveDebtTokenV1Calls); ok {
		return x.AaveDebtTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetCompoundCTokenV2Calls() *CompoundCTokenAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_CompoundCTokenV2Calls); ok {
		return x.CompoundCTokenV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveATokenV2Calls() *AaveATokenAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveATokenV2Calls); ok {
		return x.AaveATokenV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveDebtTokenV2Calls() *AaveDebtTokenAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveDebtTokenV2Calls); ok {
		return x.AaveDebtTokenV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveV3ATokenV1Calls() *AaveV3ATokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveV3ATokenV1Calls); ok {
		return x.AaveV3ATokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetAaveV3DebtTokenV1Calls() *AaveV3DebtTokenAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_AaveV3DebtTokenV1Calls); ok {
		return x.AaveV3DebtTokenV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetOneInchV1Calls() *OneInchAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_OneInchV1Calls); ok {
		return x.OneInchV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetFeesAndReservesV1Calls() *FeesAndReservesAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_FeesAndReservesV1Calls); ok {
		return x.FeesAndReservesV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetZeroXV1Calls() *ZeroXAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_ZeroXV1Calls); ok {
		return x.ZeroXV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetSwapWithUniswapV1Calls() *SwapWithUniswapAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_SwapWithUniswapV1Calls); ok {
		return x.SwapWithUniswapV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetVestingSimpleV2Calls() *VestingSimpleAdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_VestingSimpleV2Calls); ok {
		return x.VestingSimpleV2Calls
	}
	return nil
}

func (x *AdaptorCall) GetCellarV1Calls() *CellarAdaptorV1Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_CellarV1Calls); ok {
		return x.CellarV1Calls
	}
	return nil
}

func (x *AdaptorCall) GetUniswapV3V2Calls() *UniswapV3AdaptorV2Calls {
	if x, ok := x.GetCallData().(*AdaptorCall_UniswapV3V2Calls); ok {
		return x.UniswapV3V2Calls
	}
	return nil
}

type isAdaptorCall_CallData interface {
	isAdaptorCall_CallData()
}

type AdaptorCall_UniswapV3V1Calls struct {
	// Represents function calls to the UniswapV3Adaptor V1
	UniswapV3V1Calls *UniswapV3AdaptorV1Calls `protobuf:"bytes,2,opt,name=uniswap_v3_v1_calls,json=uniswapV3V1Calls,proto3,oneof"`
}

type AdaptorCall_AaveATokenV1Calls struct {
	// Represents function calls to the AaveATokenAdaptor V1
	AaveATokenV1Calls *AaveATokenAdaptorV1Calls `protobuf:"bytes,3,opt,name=aave_a_token_v1_calls,json=aaveATokenV1Calls,proto3,oneof"`
}

type AdaptorCall_AaveDebtTokenV1Calls struct {
	// Represents function calls to the AavaDebtTokenAdaptor V1
	AaveDebtTokenV1Calls *AaveDebtTokenAdaptorV1Calls `protobuf:"bytes,4,opt,name=aave_debt_token_v1_calls,json=aaveDebtTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_CompoundCTokenV2Calls struct {
	// Represents function calls to the CompoundCTokenAdaptor V2
	CompoundCTokenV2Calls *CompoundCTokenAdaptorV2Calls `protobuf:"bytes,5,opt,name=compound_c_token_v2_calls,json=compoundCTokenV2Calls,proto3,oneof"`
}

type AdaptorCall_AaveATokenV2Calls struct {
	// Represents function calls to the AaveATokenV2Adaptor
	AaveATokenV2Calls *AaveATokenAdaptorV2Calls `protobuf:"bytes,6,opt,name=aave_a_token_v2_calls,json=aaveATokenV2Calls,proto3,oneof"`
}

type AdaptorCall_AaveDebtTokenV2Calls struct {
	// Represents function calls to the AavaDebtTokenV2Adaptor
	AaveDebtTokenV2Calls *AaveDebtTokenAdaptorV2Calls `protobuf:"bytes,7,opt,name=aave_debt_token_v2_calls,json=aaveDebtTokenV2Calls,proto3,oneof"`
}

type AdaptorCall_AaveV3ATokenV1Calls struct {
	// Represents function calls to the AaveATokenV1Adaptor
	AaveV3ATokenV1Calls *AaveV3ATokenAdaptorV1Calls `protobuf:"bytes,8,opt,name=aave_v3_a_token_v1_calls,json=aaveV3ATokenV1Calls,proto3,oneof"`
}

type AdaptorCall_AaveV3DebtTokenV1Calls struct {
	// Represents function calls to the AavaDebtTokenV1Adaptor
	AaveV3DebtTokenV1Calls *AaveV3DebtTokenAdaptorV1Calls `protobuf:"bytes,9,opt,name=aave_v3_debt_token_v1_calls,json=aaveV3DebtTokenV1Calls,proto3,oneof"`
}

type AdaptorCall_OneInchV1Calls struct {
	// Represents function calls to the OneInchAdaptorV1
	OneInchV1Calls *OneInchAdaptorV1Calls `protobuf:"bytes,10,opt,name=one_inch_v1_calls,json=oneInchV1Calls,proto3,oneof"`
}

type AdaptorCall_FeesAndReservesV1Calls struct {
	// Represents function calls to the FeesAndReservesAdaptorV1
	FeesAndReservesV1Calls *FeesAndReservesAdaptorV1Calls `protobuf:"bytes,11,opt,name=fees_and_reserves_v1_calls,json=feesAndReservesV1Calls,proto3,oneof"`
}

type AdaptorCall_ZeroXV1Calls struct {
	// Represents functionc alls to the ZeroXAdaptorV1
	ZeroXV1Calls *ZeroXAdaptorV1Calls `protobuf:"bytes,12,opt,name=zero_x_v1_calls,json=zeroXV1Calls,proto3,oneof"`
}

type AdaptorCall_SwapWithUniswapV1Calls struct {
	// Represents function calls to the SwapWithUniswapAdaptorV1
	SwapWithUniswapV1Calls *SwapWithUniswapAdaptorV1Calls `protobuf:"bytes,13,opt,name=swap_with_uniswap_v1_calls,json=swapWithUniswapV1Calls,proto3,oneof"`
}

type AdaptorCall_VestingSimpleV2Calls struct {
	// Represents function calls to VestingSimpleAdaptor
	VestingSimpleV2Calls *VestingSimpleAdaptorV2Calls `protobuf:"bytes,14,opt,name=vesting_simple_v2_calls,json=vestingSimpleV2Calls,proto3,oneof"`
}

type AdaptorCall_CellarV1Calls struct {
	// Represents function calls to the CellarAdaptor
	CellarV1Calls *CellarAdaptorV1Calls `protobuf:"bytes,15,opt,name=cellar_v1_calls,json=cellarV1Calls,proto3,oneof"`
}

type AdaptorCall_UniswapV3V2Calls struct {
	// Represents function calls to the UniswapV3Adaptor V2
	UniswapV3V2Calls *UniswapV3AdaptorV2Calls `protobuf:"bytes,16,opt,name=uniswap_v3_v2_calls,json=uniswapV3V2Calls,proto3,oneof"`
}

func (*AdaptorCall_UniswapV3V1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveATokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveDebtTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_CompoundCTokenV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveATokenV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveDebtTokenV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveV3ATokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_AaveV3DebtTokenV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_OneInchV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_FeesAndReservesV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_ZeroXV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_SwapWithUniswapV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_VestingSimpleV2Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_CellarV1Calls) isAdaptorCall_CallData() {}

func (*AdaptorCall_UniswapV3V2Calls) isAdaptorCall_CallData() {}

//
// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_AddPosition) Reset() {
	*x = CellarV2_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_AddPosition) ProtoMessage() {}

func (x *CellarV2_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CellarV2_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_CallOnAdaptor) Reset() {
	*x = CellarV2_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CellarV2_CallOnAdaptor) GetData() []*AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

//
// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_RemovePosition) Reset() {
	*x = CellarV2_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_RemovePosition) ProtoMessage() {}

func (x *CellarV2_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CellarV2_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Set the holding position used of the cellar.
//
// Represents function `setHoldingPosition(uint32 positionId)`
type CellarV2_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_SetHoldingPosition) Reset() {
	*x = CellarV2_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CellarV2_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

//
// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type CellarV2_SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *CellarV2_SetStrategistPayoutAddress) Reset() {
	*x = CellarV2_SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetStrategistPayoutAddress) ProtoMessage() {}

func (x *CellarV2_SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*CellarV2_SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CellarV2_SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

//
// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint32 index1, uint32 index2, bool inDebtArray)`
type CellarV2_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint32 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint32 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
	// Whether to switch positions in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_SwapPositions) Reset() {
	*x = CellarV2_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SwapPositions) ProtoMessage() {}

func (x *CellarV2_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV2_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CellarV2_SwapPositions) GetIndex_1() uint32 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *CellarV2_SwapPositions) GetIndex_2() uint32 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

func (x *CellarV2_SwapPositions) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod(uint256 newLock)`
type CellarV2_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV2_SetShareLockPeriod) Reset() {
	*x = CellarV2_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV2_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV2_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 6}
}

func (x *CellarV2_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

//
// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_SetRebalanceDeviation) Reset() {
	*x = CellarV2_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 7}
}

func (x *CellarV2_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

//
// Allows owner to add new adaptors for the cellar to use.
//
// Represents function `setupAdaptor(address adaptor)`
type CellarV2_SetupAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the adaptor
	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2_SetupAdaptor) Reset() {
	*x = CellarV2_SetupAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetupAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetupAdaptor) ProtoMessage() {}

func (x *CellarV2_SetupAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetupAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_SetupAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 8}
}

func (x *CellarV2_SetupAdaptor) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

//
// Allows owner to set the platform fee.
//
// Represents function `setPlatformFee(uint64 platformFee)`
type CellarV2_SetPlatformFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformFee uint64 `protobuf:"varint,1,opt,name=platform_fee,json=platformFee,proto3" json:"platform_fee,omitempty"`
}

func (x *CellarV2_SetPlatformFee) Reset() {
	*x = CellarV2_SetPlatformFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetPlatformFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetPlatformFee) ProtoMessage() {}

func (x *CellarV2_SetPlatformFee) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetPlatformFee.ProtoReflect.Descriptor instead.
func (*CellarV2_SetPlatformFee) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 9}
}

func (x *CellarV2_SetPlatformFee) GetPlatformFee() uint64 {
	if x != nil {
		return x.PlatformFee
	}
	return 0
}

//
// Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.
//
// Represents function `initiateShutdown()`
type CellarV2_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_InitiateShutdown) Reset() {
	*x = CellarV2_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 10}
}

//
// Allows the owner to restart a shut down Cellar
//
// Represents function `liftShutdown()`
type CellarV2_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_LiftShutdown) Reset() {
	*x = CellarV2_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_LiftShutdown) ProtoMessage() {}

func (x *CellarV2_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 11}
}

// The function you wish to execute on the target cellar
type CellarV2_2_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//	*CellarV2_2_FunctionCall_AddPosition
	//	*CellarV2_2_FunctionCall_CallOnAdaptor
	//	*CellarV2_2_FunctionCall_RemovePosition
	//	*CellarV2_2_FunctionCall_SetHoldingPosition
	//	*CellarV2_2_FunctionCall_SetStrategistPayoutAddress
	//	*CellarV2_2_FunctionCall_SwapPositions
	//	*CellarV2_2_FunctionCall_SetRebalanceDeviation
	//	*CellarV2_2_FunctionCall_SetShareLockPeriod
	//	*CellarV2_2_FunctionCall_InitiateShutdown
	//	*CellarV2_2_FunctionCall_SetStrategistPlatformCut
	//	*CellarV2_2_FunctionCall_LiftShutdown
	Function isCellarV2_2_FunctionCall_Function `protobuf_oneof:"function"`
}

func (x *CellarV2_2_FunctionCall) Reset() {
	*x = CellarV2_2_FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_FunctionCall) ProtoMessage() {}

func (x *CellarV2_2_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_FunctionCall.ProtoReflect.Descriptor instead.
func (*CellarV2_2_FunctionCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 0}
}

func (m *CellarV2_2_FunctionCall) GetFunction() isCellarV2_2_FunctionCall_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetAddPosition() *CellarV2_2_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_AddPosition); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetCallOnAdaptor() *CellarV2_2_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_CallOnAdaptor); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetRemovePosition() *CellarV2_2_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_RemovePosition); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetHoldingPosition() *CellarV2_2_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetHoldingPosition); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetStrategistPayoutAddress() *CellarV2_2_SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetStrategistPayoutAddress); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSwapPositions() *CellarV2_2_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SwapPositions); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetRebalanceDeviation() *CellarV2_2_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetRebalanceDeviation); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetShareLockPeriod() *CellarV2_2_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetShareLockPeriod); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetInitiateShutdown() *CellarV2_2_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_InitiateShutdown); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetSetStrategistPlatformCut() *CellarV2_2_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_SetStrategistPlatformCut); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2_2_FunctionCall) GetLiftShutdown() *CellarV2_2_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2_2_FunctionCall_LiftShutdown); ok {
		return x.LiftShutdown
	}
	return nil
}

type isCellarV2_2_FunctionCall_Function interface {
	isCellarV2_2_FunctionCall_Function()
}

type CellarV2_2_FunctionCall_AddPosition struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_2_AddPosition `protobuf:"bytes,1,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_2_FunctionCall_CallOnAdaptor struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_2_CallOnAdaptor `protobuf:"bytes,2,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_2_FunctionCall_RemovePosition struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *CellarV2_2_RemovePosition `protobuf:"bytes,3,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetHoldingPosition struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_2_SetHoldingPosition `protobuf:"bytes,4,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetStrategistPayoutAddress struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *CellarV2_2_SetStrategistPayoutAddress `protobuf:"bytes,5,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SwapPositions struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV2_2_SwapPositions `protobuf:"bytes,6,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetRebalanceDeviation struct {
	// Represents function `setRebalanceDeviation(uint265)`
	SetRebalanceDeviation *CellarV2_2_SetRebalanceDeviation `protobuf:"bytes,7,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetShareLockPeriod struct {
	// Represents function `setShareLockPeriod(uint256 newLock)`
	SetShareLockPeriod *CellarV2_2_SetShareLockPeriod `protobuf:"bytes,8,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

type CellarV2_2_FunctionCall_InitiateShutdown struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2_2_InitiateShutdown `protobuf:"bytes,9,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2_2_FunctionCall_SetStrategistPlatformCut struct {
	// Represents function `setStrategistPlatformCut(uint64 cut)`
	SetStrategistPlatformCut *CellarV2_2_SetStrategistPlatformCut `protobuf:"bytes,10,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2_2_FunctionCall_LiftShutdown struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2_2_LiftShutdown `protobuf:"bytes,11,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

func (*CellarV2_2_FunctionCall_AddPosition) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_CallOnAdaptor) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_RemovePosition) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetHoldingPosition) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetStrategistPayoutAddress) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SwapPositions) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetRebalanceDeviation) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetShareLockPeriod) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_InitiateShutdown) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_SetStrategistPlatformCut) isCellarV2_2_FunctionCall_Function() {}

func (*CellarV2_2_FunctionCall_LiftShutdown) isCellarV2_2_FunctionCall_Function() {}

//
// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_2_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2_AddPosition) Reset() {
	*x = CellarV2_2_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_AddPosition) ProtoMessage() {}

func (x *CellarV2_2_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CellarV2_2_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_2_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_2_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_2_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_2_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_2_CallOnAdaptor) Reset() {
	*x = CellarV2_2_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_2_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_2_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CellarV2_2_CallOnAdaptor) GetData() []*AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

//
// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_2_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2_RemovePosition) Reset() {
	*x = CellarV2_2_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_RemovePosition) ProtoMessage() {}

func (x *CellarV2_2_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 3}
}

func (x *CellarV2_2_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_2_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Set the holding position used of the cellar.
//
// Represents function `setHoldingIndex(uint8 index)`
type CellarV2_2_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_2_SetHoldingPosition) Reset() {
	*x = CellarV2_2_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_2_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 4}
}

func (x *CellarV2_2_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

//
// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type CellarV2_2_SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *CellarV2_2_SetStrategistPayoutAddress) Reset() {
	*x = CellarV2_2_SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetStrategistPayoutAddress) ProtoMessage() {}

func (x *CellarV2_2_SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 5}
}

func (x *CellarV2_2_SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

//
// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint32 index1, uint32 index2)`
type CellarV2_2_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint32 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint32 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
	// Whether to switch positions in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_2_SwapPositions) Reset() {
	*x = CellarV2_2_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SwapPositions) ProtoMessage() {}

func (x *CellarV2_2_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 6}
}

func (x *CellarV2_2_SwapPositions) GetIndex_1() uint32 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *CellarV2_2_SwapPositions) GetIndex_2() uint32 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

func (x *CellarV2_2_SwapPositions) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type CellarV2_2_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV2_2_SetShareLockPeriod) Reset() {
	*x = CellarV2_2_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV2_2_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 7}
}

func (x *CellarV2_2_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

//
// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_2_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_2_SetRebalanceDeviation) Reset() {
	*x = CellarV2_2_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_2_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 8}
}

func (x *CellarV2_2_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

//
// Shutdown the cellar. Used in an emergency or if the cellar has been deprecated.
//
// Represents function `initiateShutdown()`
type CellarV2_2_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_2_InitiateShutdown) Reset() {
	*x = CellarV2_2_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2_2_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_2_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 9}
}

//
// Allows strategist to set the platform cut for the cellar.
//
// Represents function `setStrategistPlatformCut(uint64 cut)`
type CellarV2_2_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new strategist platform cut
	NewCut uint64 `protobuf:"varint,1,opt,name=new_cut,json=newCut,proto3" json:"new_cut,omitempty"`
}

func (x *CellarV2_2_SetStrategistPlatformCut) Reset() {
	*x = CellarV2_2_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2_2_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2_2_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 10}
}

func (x *CellarV2_2_SetStrategistPlatformCut) GetNewCut() uint64 {
	if x != nil {
		return x.NewCut
	}
	return 0
}

//
// Allows the owner to restart a shut down Cellar
//
// Represents function `liftShutdown()`
type CellarV2_2_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2_2_LiftShutdown) Reset() {
	*x = CellarV2_2_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_LiftShutdown) ProtoMessage() {}

func (x *CellarV2_2_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2_2_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 11}
}

//
// Allows caller to call multiple functions in a single TX.
//
// Represents function `multicall(bytes[] data)`
type CellarV2_2_Multicall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCalls []*CellarV2_2_FunctionCall `protobuf:"bytes,1,rep,name=function_calls,json=functionCalls,proto3" json:"function_calls,omitempty"`
}

func (x *CellarV2_2_Multicall) Reset() {
	*x = CellarV2_2_Multicall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_2_Multicall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_2_Multicall) ProtoMessage() {}

func (x *CellarV2_2_Multicall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_2_Multicall.ProtoReflect.Descriptor instead.
func (*CellarV2_2_Multicall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 12}
}

func (x *CellarV2_2_Multicall) GetFunctionCalls() []*CellarV2_2_FunctionCall {
	if x != nil {
		return x.FunctionCalls
	}
	return nil
}

var File_cellar_v2_proto protoreflect.FileDescriptor

var file_cellar_v2_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x1a, 0x1b, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x61, 0x76, 0x65, 0x2f, 0x61, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x61, 0x76, 0x65, 0x2f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x61, 0x76, 0x65, 0x2f, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76,
	0x33, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x61, 0x76, 0x65, 0x2f, 0x61,
	0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x63, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x75, 0x6e, 0x69, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x30, 0x78, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x31, 0x69, 0x6e, 0x63,
	0x68, 0x2f, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x73, 0x6f, 0x6d, 0x6d, 0x65, 0x6c, 0x69,
	0x65, 0x72, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x0e, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4f,
	0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c,
	0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x65, 0x74,
	0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x1a, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0e,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x52, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x48, 0x0a,
	0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x48,
	0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x4c, 0x69, 0x66, 0x74,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x66, 0x74,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x1a, 0x3c, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x35, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x1a, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x77, 0x61,
	0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x1a, 0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63,
	0x6b, 0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x28, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x33, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x1a, 0x12,
	0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc,
	0x0f, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x12, 0x4a, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x5f, 0x32, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x1a, 0x89, 0x08, 0x0a, 0x0c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x1a, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d,
	0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a,
	0x17, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x70, 0x0a,
	0x1b, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x43, 0x75, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12,
	0x4a, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x5f, 0x32, 0x2e, 0x4c,
	0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x69, 0x66, 0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x1a, 0x3c, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x35, 0x0a, 0x12, 0x53,
	0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x1a, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a,
	0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x6b,
	0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12,
	0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x1a, 0x33, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x74, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x57, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x5f, 0x32, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x0b,
	0x0a, 0x0b, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56, 0x33, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x75, 0x6e, 0x69,
	0x73, 0x77, 0x61, 0x70, 0x56, 0x33, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x58, 0x0a,
	0x15, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x31,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x41, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x61, 0x76, 0x65, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x61, 0x61, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x44, 0x65, 0x62, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x61, 0x61, 0x76, 0x65, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76,
	0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x58, 0x0a, 0x15, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x61, 0x76,
	0x65, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x61, 0x76, 0x65, 0x41, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x61, 0x61,
	0x76, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x32,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x44, 0x65,
	0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14, 0x61, 0x61, 0x76, 0x65, 0x44, 0x65, 0x62,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x5f, 0x0a,
	0x18, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x61, 0x76,
	0x65, 0x56, 0x33, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x61, 0x61, 0x76, 0x65, 0x56,
	0x33, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x68,
	0x0a, 0x1b, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x41, 0x61, 0x76, 0x65, 0x56, 0x33, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x16, 0x61, 0x61, 0x76, 0x65, 0x56, 0x33, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x68, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56,
	0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x63,
	0x68, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x76, 0x31,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x16, 0x66, 0x65, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x48, 0x0a, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x78, 0x5f, 0x76, 0x31, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x5a, 0x65, 0x72, 0x6f, 0x58, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x7a,
	0x65, 0x72, 0x6f, 0x58, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x77, 0x61,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x16, 0x73, 0x77,
	0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56, 0x31, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x14, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56,
	0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x5f, 0x76, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x61, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x76, 0x33,
	0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x6e, 0x69,
	0x73, 0x77, 0x61, 0x70, 0x56, 0x33, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56,
	0x33, 0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellar_v2_proto_rawDescOnce sync.Once
	file_cellar_v2_proto_rawDescData = file_cellar_v2_proto_rawDesc
)

func file_cellar_v2_proto_rawDescGZIP() []byte {
	file_cellar_v2_proto_rawDescOnce.Do(func() {
		file_cellar_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellar_v2_proto_rawDescData)
	})
	return file_cellar_v2_proto_rawDescData
}

var file_cellar_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_cellar_v2_proto_goTypes = []interface{}{
	(*CellarV2)(nil),                              // 0: steward.v3.CellarV2
	(*CellarV2_2)(nil),                            // 1: steward.v3.CellarV2_2
	(*AdaptorCall)(nil),                           // 2: steward.v3.AdaptorCall
	(*CellarV2_AddPosition)(nil),                  // 3: steward.v3.CellarV2.AddPosition
	(*CellarV2_CallOnAdaptor)(nil),                // 4: steward.v3.CellarV2.CallOnAdaptor
	(*CellarV2_RemovePosition)(nil),               // 5: steward.v3.CellarV2.RemovePosition
	(*CellarV2_SetHoldingPosition)(nil),           // 6: steward.v3.CellarV2.SetHoldingPosition
	(*CellarV2_SetStrategistPayoutAddress)(nil),   // 7: steward.v3.CellarV2.SetStrategistPayoutAddress
	(*CellarV2_SwapPositions)(nil),                // 8: steward.v3.CellarV2.SwapPositions
	(*CellarV2_SetShareLockPeriod)(nil),           // 9: steward.v3.CellarV2.SetShareLockPeriod
	(*CellarV2_SetRebalanceDeviation)(nil),        // 10: steward.v3.CellarV2.SetRebalanceDeviation
	(*CellarV2_SetupAdaptor)(nil),                 // 11: steward.v3.CellarV2.SetupAdaptor
	(*CellarV2_SetPlatformFee)(nil),               // 12: steward.v3.CellarV2.SetPlatformFee
	(*CellarV2_InitiateShutdown)(nil),             // 13: steward.v3.CellarV2.InitiateShutdown
	(*CellarV2_LiftShutdown)(nil),                 // 14: steward.v3.CellarV2.LiftShutdown
	(*CellarV2_2_FunctionCall)(nil),               // 15: steward.v3.CellarV2_2.FunctionCall
	(*CellarV2_2_AddPosition)(nil),                // 16: steward.v3.CellarV2_2.AddPosition
	(*CellarV2_2_CallOnAdaptor)(nil),              // 17: steward.v3.CellarV2_2.CallOnAdaptor
	(*CellarV2_2_RemovePosition)(nil),             // 18: steward.v3.CellarV2_2.RemovePosition
	(*CellarV2_2_SetHoldingPosition)(nil),         // 19: steward.v3.CellarV2_2.SetHoldingPosition
	(*CellarV2_2_SetStrategistPayoutAddress)(nil), // 20: steward.v3.CellarV2_2.SetStrategistPayoutAddress
	(*CellarV2_2_SwapPositions)(nil),              // 21: steward.v3.CellarV2_2.SwapPositions
	(*CellarV2_2_SetShareLockPeriod)(nil),         // 22: steward.v3.CellarV2_2.SetShareLockPeriod
	(*CellarV2_2_SetRebalanceDeviation)(nil),      // 23: steward.v3.CellarV2_2.SetRebalanceDeviation
	(*CellarV2_2_InitiateShutdown)(nil),           // 24: steward.v3.CellarV2_2.InitiateShutdown
	(*CellarV2_2_SetStrategistPlatformCut)(nil),   // 25: steward.v3.CellarV2_2.SetStrategistPlatformCut
	(*CellarV2_2_LiftShutdown)(nil),               // 26: steward.v3.CellarV2_2.LiftShutdown
	(*CellarV2_2_Multicall)(nil),                  // 27: steward.v3.CellarV2_2.Multicall
	(*UniswapV3AdaptorV1Calls)(nil),               // 28: steward.v3.UniswapV3AdaptorV1Calls
	(*AaveATokenAdaptorV1Calls)(nil),              // 29: steward.v3.AaveATokenAdaptorV1Calls
	(*AaveDebtTokenAdaptorV1Calls)(nil),           // 30: steward.v3.AaveDebtTokenAdaptorV1Calls
	(*CompoundCTokenAdaptorV2Calls)(nil),          // 31: steward.v3.CompoundCTokenAdaptorV2Calls
	(*AaveATokenAdaptorV2Calls)(nil),              // 32: steward.v3.AaveATokenAdaptorV2Calls
	(*AaveDebtTokenAdaptorV2Calls)(nil),           // 33: steward.v3.AaveDebtTokenAdaptorV2Calls
	(*AaveV3ATokenAdaptorV1Calls)(nil),            // 34: steward.v3.AaveV3ATokenAdaptorV1Calls
	(*AaveV3DebtTokenAdaptorV1Calls)(nil),         // 35: steward.v3.AaveV3DebtTokenAdaptorV1Calls
	(*OneInchAdaptorV1Calls)(nil),                 // 36: steward.v3.OneInchAdaptorV1Calls
	(*FeesAndReservesAdaptorV1Calls)(nil),         // 37: steward.v3.FeesAndReservesAdaptorV1Calls
	(*ZeroXAdaptorV1Calls)(nil),                   // 38: steward.v3.ZeroXAdaptorV1Calls
	(*SwapWithUniswapAdaptorV1Calls)(nil),         // 39: steward.v3.SwapWithUniswapAdaptorV1Calls
	(*VestingSimpleAdaptorV2Calls)(nil),           // 40: steward.v3.VestingSimpleAdaptorV2Calls
	(*CellarAdaptorV1Calls)(nil),                  // 41: steward.v3.CellarAdaptorV1Calls
	(*UniswapV3AdaptorV2Calls)(nil),               // 42: steward.v3.UniswapV3AdaptorV2Calls
}
var file_cellar_v2_proto_depIdxs = []int32{
	3,  // 0: steward.v3.CellarV2.add_position:type_name -> steward.v3.CellarV2.AddPosition
	4,  // 1: steward.v3.CellarV2.call_on_adaptor:type_name -> steward.v3.CellarV2.CallOnAdaptor
	5,  // 2: steward.v3.CellarV2.remove_position:type_name -> steward.v3.CellarV2.RemovePosition
	6,  // 3: steward.v3.CellarV2.set_holding_position:type_name -> steward.v3.CellarV2.SetHoldingPosition
	7,  // 4: steward.v3.CellarV2.set_strategist_payout_address:type_name -> steward.v3.CellarV2.SetStrategistPayoutAddress
	8,  // 5: steward.v3.CellarV2.swap_positions:type_name -> steward.v3.CellarV2.SwapPositions
	10, // 6: steward.v3.CellarV2.set_rebalance_deviation:type_name -> steward.v3.CellarV2.SetRebalanceDeviation
	9,  // 7: steward.v3.CellarV2.set_share_lock_period:type_name -> steward.v3.CellarV2.SetShareLockPeriod
	11, // 8: steward.v3.CellarV2.setup_adaptor:type_name -> steward.v3.CellarV2.SetupAdaptor
	12, // 9: steward.v3.CellarV2.set_platform_fee:type_name -> steward.v3.CellarV2.SetPlatformFee
	13, // 10: steward.v3.CellarV2.initiate_shutdown:type_name -> steward.v3.CellarV2.InitiateShutdown
	14, // 11: steward.v3.CellarV2.lift_shutdown:type_name -> steward.v3.CellarV2.LiftShutdown
	15, // 12: steward.v3.CellarV2_2.function_call:type_name -> steward.v3.CellarV2_2.FunctionCall
	27, // 13: steward.v3.CellarV2_2.multicall:type_name -> steward.v3.CellarV2_2.Multicall
	28, // 14: steward.v3.AdaptorCall.uniswap_v3_v1_calls:type_name -> steward.v3.UniswapV3AdaptorV1Calls
	29, // 15: steward.v3.AdaptorCall.aave_a_token_v1_calls:type_name -> steward.v3.AaveATokenAdaptorV1Calls
	30, // 16: steward.v3.AdaptorCall.aave_debt_token_v1_calls:type_name -> steward.v3.AaveDebtTokenAdaptorV1Calls
	31, // 17: steward.v3.AdaptorCall.compound_c_token_v2_calls:type_name -> steward.v3.CompoundCTokenAdaptorV2Calls
	32, // 18: steward.v3.AdaptorCall.aave_a_token_v2_calls:type_name -> steward.v3.AaveATokenAdaptorV2Calls
	33, // 19: steward.v3.AdaptorCall.aave_debt_token_v2_calls:type_name -> steward.v3.AaveDebtTokenAdaptorV2Calls
	34, // 20: steward.v3.AdaptorCall.aave_v3_a_token_v1_calls:type_name -> steward.v3.AaveV3ATokenAdaptorV1Calls
	35, // 21: steward.v3.AdaptorCall.aave_v3_debt_token_v1_calls:type_name -> steward.v3.AaveV3DebtTokenAdaptorV1Calls
	36, // 22: steward.v3.AdaptorCall.one_inch_v1_calls:type_name -> steward.v3.OneInchAdaptorV1Calls
	37, // 23: steward.v3.AdaptorCall.fees_and_reserves_v1_calls:type_name -> steward.v3.FeesAndReservesAdaptorV1Calls
	38, // 24: steward.v3.AdaptorCall.zero_x_v1_calls:type_name -> steward.v3.ZeroXAdaptorV1Calls
	39, // 25: steward.v3.AdaptorCall.swap_with_uniswap_v1_calls:type_name -> steward.v3.SwapWithUniswapAdaptorV1Calls
	40, // 26: steward.v3.AdaptorCall.vesting_simple_v2_calls:type_name -> steward.v3.VestingSimpleAdaptorV2Calls
	41, // 27: steward.v3.AdaptorCall.cellar_v1_calls:type_name -> steward.v3.CellarAdaptorV1Calls
	42, // 28: steward.v3.AdaptorCall.uniswap_v3_v2_calls:type_name -> steward.v3.UniswapV3AdaptorV2Calls
	2,  // 29: steward.v3.CellarV2.CallOnAdaptor.data:type_name -> steward.v3.AdaptorCall
	16, // 30: steward.v3.CellarV2_2.FunctionCall.add_position:type_name -> steward.v3.CellarV2_2.AddPosition
	17, // 31: steward.v3.CellarV2_2.FunctionCall.call_on_adaptor:type_name -> steward.v3.CellarV2_2.CallOnAdaptor
	18, // 32: steward.v3.CellarV2_2.FunctionCall.remove_position:type_name -> steward.v3.CellarV2_2.RemovePosition
	19, // 33: steward.v3.CellarV2_2.FunctionCall.set_holding_position:type_name -> steward.v3.CellarV2_2.SetHoldingPosition
	20, // 34: steward.v3.CellarV2_2.FunctionCall.set_strategist_payout_address:type_name -> steward.v3.CellarV2_2.SetStrategistPayoutAddress
	21, // 35: steward.v3.CellarV2_2.FunctionCall.swap_positions:type_name -> steward.v3.CellarV2_2.SwapPositions
	23, // 36: steward.v3.CellarV2_2.FunctionCall.set_rebalance_deviation:type_name -> steward.v3.CellarV2_2.SetRebalanceDeviation
	22, // 37: steward.v3.CellarV2_2.FunctionCall.set_share_lock_period:type_name -> steward.v3.CellarV2_2.SetShareLockPeriod
	24, // 38: steward.v3.CellarV2_2.FunctionCall.initiate_shutdown:type_name -> steward.v3.CellarV2_2.InitiateShutdown
	25, // 39: steward.v3.CellarV2_2.FunctionCall.set_strategist_platform_cut:type_name -> steward.v3.CellarV2_2.SetStrategistPlatformCut
	26, // 40: steward.v3.CellarV2_2.FunctionCall.lift_shutdown:type_name -> steward.v3.CellarV2_2.LiftShutdown
	2,  // 41: steward.v3.CellarV2_2.CallOnAdaptor.data:type_name -> steward.v3.AdaptorCall
	15, // 42: steward.v3.CellarV2_2.Multicall.function_calls:type_name -> steward.v3.CellarV2_2.FunctionCall
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_cellar_v2_proto_init() }
func file_cellar_v2_proto_init() {
	if File_cellar_v2_proto != nil {
		return
	}
	file_adaptors_aave_a_token_proto_init()
	file_adaptors_aave_debt_token_proto_init()
	file_adaptors_aave_aave_v3_a_token_proto_init()
	file_adaptors_aave_aave_v3_debt_token_proto_init()
	file_adaptors_compound_c_token_proto_init()
	file_adaptors_uniswap_uniswap_v3_proto_init()
	file_adaptors_uniswap_swap_with_uniswap_proto_init()
	file_adaptors_fees_and_reserves_proto_init()
	file_adaptors_0x_zero_x_proto_init()
	file_adaptors_1inch_oneinch_proto_init()
	file_adaptors_vesting_simple_proto_init()
	file_adaptors_sommelier_cellar_adaptor_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cellar_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetupAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetPlatformFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_2_Multicall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cellar_v2_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CellarV2_AddPosition_)(nil),
		(*CellarV2_CallOnAdaptor_)(nil),
		(*CellarV2_RemovePosition_)(nil),
		(*CellarV2_SetHoldingPosition_)(nil),
		(*CellarV2_SetStrategistPayoutAddress_)(nil),
		(*CellarV2_SwapPositions_)(nil),
		(*CellarV2_SetRebalanceDeviation_)(nil),
		(*CellarV2_SetShareLockPeriod_)(nil),
		(*CellarV2_SetupAdaptor_)(nil),
		(*CellarV2_SetPlatformFee_)(nil),
		(*CellarV2_InitiateShutdown_)(nil),
		(*CellarV2_LiftShutdown_)(nil),
	}
	file_cellar_v2_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CellarV2_2_FunctionCall_)(nil),
		(*CellarV2_2_Multicall_)(nil),
	}
	file_cellar_v2_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AdaptorCall_UniswapV3V1Calls)(nil),
		(*AdaptorCall_AaveATokenV1Calls)(nil),
		(*AdaptorCall_AaveDebtTokenV1Calls)(nil),
		(*AdaptorCall_CompoundCTokenV2Calls)(nil),
		(*AdaptorCall_AaveATokenV2Calls)(nil),
		(*AdaptorCall_AaveDebtTokenV2Calls)(nil),
		(*AdaptorCall_AaveV3ATokenV1Calls)(nil),
		(*AdaptorCall_AaveV3DebtTokenV1Calls)(nil),
		(*AdaptorCall_OneInchV1Calls)(nil),
		(*AdaptorCall_FeesAndReservesV1Calls)(nil),
		(*AdaptorCall_ZeroXV1Calls)(nil),
		(*AdaptorCall_SwapWithUniswapV1Calls)(nil),
		(*AdaptorCall_VestingSimpleV2Calls)(nil),
		(*AdaptorCall_CellarV1Calls)(nil),
		(*AdaptorCall_UniswapV3V2Calls)(nil),
	}
	file_cellar_v2_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CellarV2_2_FunctionCall_AddPosition)(nil),
		(*CellarV2_2_FunctionCall_CallOnAdaptor)(nil),
		(*CellarV2_2_FunctionCall_RemovePosition)(nil),
		(*CellarV2_2_FunctionCall_SetHoldingPosition)(nil),
		(*CellarV2_2_FunctionCall_SetStrategistPayoutAddress)(nil),
		(*CellarV2_2_FunctionCall_SwapPositions)(nil),
		(*CellarV2_2_FunctionCall_SetRebalanceDeviation)(nil),
		(*CellarV2_2_FunctionCall_SetShareLockPeriod)(nil),
		(*CellarV2_2_FunctionCall_InitiateShutdown)(nil),
		(*CellarV2_2_FunctionCall_SetStrategistPlatformCut)(nil),
		(*CellarV2_2_FunctionCall_LiftShutdown)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellar_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cellar_v2_proto_goTypes,
		DependencyIndexes: file_cellar_v2_proto_depIdxs,
		MessageInfos:      file_cellar_v2_proto_msgTypes,
	}.Build()
	File_cellar_v2_proto = out.File
	file_cellar_v2_proto_rawDesc = nil
	file_cellar_v2_proto_goTypes = nil
	file_cellar_v2_proto_depIdxs = nil
}
