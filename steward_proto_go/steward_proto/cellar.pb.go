//
// An API for cellars that implement the EIP4626-compatible Cellar.sol contract.
//
// See [Cellar.sol](https://github.com/PeggyJV/cellar-contracts/blob/main/src/base/Cellar.sol)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.4
// source: cellar.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Exchange selector
type Exchange int32

const (
	Exchange_EXCHANGE_UNSPECIFIED Exchange = 0
	// Represents Uniswap V2
	Exchange_EXCHANGE_UNIV2 Exchange = 1
	// Represents Uniswap V3
	Exchange_EXCHANGE_UNIV3 Exchange = 2
)

// Enum value maps for Exchange.
var (
	Exchange_name = map[int32]string{
		0: "EXCHANGE_UNSPECIFIED",
		1: "EXCHANGE_UNIV2",
		2: "EXCHANGE_UNIV3",
	}
	Exchange_value = map[string]int32{
		"EXCHANGE_UNSPECIFIED": 0,
		"EXCHANGE_UNIV2":       1,
		"EXCHANGE_UNIV3":       2,
	}
)

func (x Exchange) Enum() *Exchange {
	p := new(Exchange)
	*p = x
	return p
}

func (x Exchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Exchange) Descriptor() protoreflect.EnumDescriptor {
	return file_cellar_proto_enumTypes[0].Descriptor()
}

func (Exchange) Type() protoreflect.EnumType {
	return &file_cellar_proto_enumTypes[0]
}

func (x Exchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Exchange.Descriptor instead.
func (Exchange) EnumDescriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{0}
}

//
// Represents the withdraw type to use for the cellar
type WithdrawType int32

const (
	WithdrawType_WITHDRAW_TYPE_UNSPECIFIED  WithdrawType = 0
	WithdrawType_WITHDRAW_TYPE_ORDERLY      WithdrawType = 1
	WithdrawType_WITHDRAW_TYPE_PROPORTIONAL WithdrawType = 2
)

// Enum value maps for WithdrawType.
var (
	WithdrawType_name = map[int32]string{
		0: "WITHDRAW_TYPE_UNSPECIFIED",
		1: "WITHDRAW_TYPE_ORDERLY",
		2: "WITHDRAW_TYPE_PROPORTIONAL",
	}
	WithdrawType_value = map[string]int32{
		"WITHDRAW_TYPE_UNSPECIFIED":  0,
		"WITHDRAW_TYPE_ORDERLY":      1,
		"WITHDRAW_TYPE_PROPORTIONAL": 2,
	}
)

func (x WithdrawType) Enum() *WithdrawType {
	p := new(WithdrawType)
	*p = x
	return p
}

func (x WithdrawType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WithdrawType) Descriptor() protoreflect.EnumDescriptor {
	return file_cellar_proto_enumTypes[1].Descriptor()
}

func (WithdrawType) Type() protoreflect.EnumType {
	return &file_cellar_proto_enumTypes[1]
}

func (x WithdrawType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WithdrawType.Descriptor instead.
func (WithdrawType) EnumDescriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{1}
}

//
// Represents a function call to a cellar that implements Cellar.sol
type Cellar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function you wish to execute on the target cellar
	//
	// Types that are assignable to Function:
	//	*Cellar_AddPosition
	//	*Cellar_PushPosition
	//	*Cellar_RemovePosition
	//	*Cellar_SetHoldingPosition
	//	*Cellar_Rebalance
	//	*Cellar_SetStrategistPayoutAddress
	//	*Cellar_SetWithdrawType
	//	*Cellar_SwapPositions
	//	*Cellar_SetDepositLimit
	//	*Cellar_SetLiquidityLimit
	//	*Cellar_SetShareLockPeriod
	Function isCellar_Function `protobuf_oneof:"function"`
}

func (x *Cellar) Reset() {
	*x = Cellar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cellar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cellar) ProtoMessage() {}

func (x *Cellar) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cellar.ProtoReflect.Descriptor instead.
func (*Cellar) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{0}
}

func (m *Cellar) GetFunction() isCellar_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *Cellar) GetAddPosition() *AddPosition {
	if x, ok := x.GetFunction().(*Cellar_AddPosition); ok {
		return x.AddPosition
	}
	return nil
}

func (x *Cellar) GetPushPosition() *PushPosition {
	if x, ok := x.GetFunction().(*Cellar_PushPosition); ok {
		return x.PushPosition
	}
	return nil
}

func (x *Cellar) GetRemovePosition() *RemovePosition {
	if x, ok := x.GetFunction().(*Cellar_RemovePosition); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *Cellar) GetSetHoldingPosition() *SetHoldingPosition {
	if x, ok := x.GetFunction().(*Cellar_SetHoldingPosition); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *Cellar) GetRebalance() *Rebalance {
	if x, ok := x.GetFunction().(*Cellar_Rebalance); ok {
		return x.Rebalance
	}
	return nil
}

func (x *Cellar) GetSetStrategistPayoutAddress() *SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*Cellar_SetStrategistPayoutAddress); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *Cellar) GetSetWithdrawType() *SetWithdrawType {
	if x, ok := x.GetFunction().(*Cellar_SetWithdrawType); ok {
		return x.SetWithdrawType
	}
	return nil
}

func (x *Cellar) GetSwapPositions() *SwapPositions {
	if x, ok := x.GetFunction().(*Cellar_SwapPositions); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *Cellar) GetSetDepositLimit() *SetDepositLimit {
	if x, ok := x.GetFunction().(*Cellar_SetDepositLimit); ok {
		return x.SetDepositLimit
	}
	return nil
}

func (x *Cellar) GetSetLiquidityLimit() *SetLiquidityLimit {
	if x, ok := x.GetFunction().(*Cellar_SetLiquidityLimit); ok {
		return x.SetLiquidityLimit
	}
	return nil
}

func (x *Cellar) GetSetShareLockPeriod() *SetShareLockPeriod {
	if x, ok := x.GetFunction().(*Cellar_SetShareLockPeriod); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

type isCellar_Function interface {
	isCellar_Function()
}

type Cellar_AddPosition struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *AddPosition `protobuf:"bytes,1,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type Cellar_PushPosition struct {
	// Represents function `pushPosition(address position)`
	PushPosition *PushPosition `protobuf:"bytes,2,opt,name=push_position,json=pushPosition,proto3,oneof"`
}

type Cellar_RemovePosition struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *RemovePosition `protobuf:"bytes,3,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type Cellar_SetHoldingPosition struct {
	// Represents function `setHoldingPosition(address newHoldingPosition)`
	SetHoldingPosition *SetHoldingPosition `protobuf:"bytes,4,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type Cellar_Rebalance struct {
	//
	// Represents function `rebalance(address fromPosition, address toPosition,
	//uint256 assetsFrom, SwapRouter.Exchange exchange, bytes calldata params)`
	Rebalance *Rebalance `protobuf:"bytes,5,opt,name=rebalance,proto3,oneof"`
}

type Cellar_SetStrategistPayoutAddress struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *SetStrategistPayoutAddress `protobuf:"bytes,6,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type Cellar_SetWithdrawType struct {
	// Represents function `setWithdrawType(WithdrawType newWithdrawType)`
	SetWithdrawType *SetWithdrawType `protobuf:"bytes,7,opt,name=set_withdraw_type,json=setWithdrawType,proto3,oneof"`
}

type Cellar_SwapPositions struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *SwapPositions `protobuf:"bytes,8,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type Cellar_SetDepositLimit struct {
	// Represents function `setDepositLimit()`
	SetDepositLimit *SetDepositLimit `protobuf:"bytes,9,opt,name=set_deposit_limit,json=setDepositLimit,proto3,oneof"`
}

type Cellar_SetLiquidityLimit struct {
	// Represents function `setLiquidityLimit()`
	SetLiquidityLimit *SetLiquidityLimit `protobuf:"bytes,10,opt,name=set_liquidity_limit,json=setLiquidityLimit,proto3,oneof"`
}

type Cellar_SetShareLockPeriod struct {
	// Represents function `setShareLockPeriod()`
	SetShareLockPeriod *SetShareLockPeriod `protobuf:"bytes,11,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

func (*Cellar_AddPosition) isCellar_Function() {}

func (*Cellar_PushPosition) isCellar_Function() {}

func (*Cellar_RemovePosition) isCellar_Function() {}

func (*Cellar_SetHoldingPosition) isCellar_Function() {}

func (*Cellar_Rebalance) isCellar_Function() {}

func (*Cellar_SetStrategistPayoutAddress) isCellar_Function() {}

func (*Cellar_SetWithdrawType) isCellar_Function() {}

func (*Cellar_SwapPositions) isCellar_Function() {}

func (*Cellar_SetDepositLimit) isCellar_Function() {}

func (*Cellar_SetLiquidityLimit) isCellar_Function() {}

func (*Cellar_SetShareLockPeriod) isCellar_Function() {}

//
// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint256 index, address position)`
type AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Address of the position to add
	Position string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *AddPosition) Reset() {
	*x = AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPosition) ProtoMessage() {}

func (x *AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPosition.ProtoReflect.Descriptor instead.
func (*AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{1}
}

func (x *AddPosition) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AddPosition) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

//
// Push a trusted position to the end of the list of positions used by the cellar. If you
//know you are going to add a position to the end of the array, this is more efficient then
//`addPosition`.
//
// Represents function `pushPosition(address position)`
type PushPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the position to push
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *PushPosition) Reset() {
	*x = PushPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushPosition) ProtoMessage() {}

func (x *PushPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushPosition.ProtoReflect.Descriptor instead.
func (*PushPosition) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{2}
}

func (x *PushPosition) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

//
// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint256 index)`
type RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RemovePosition) Reset() {
	*x = RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePosition) ProtoMessage() {}

func (x *RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePosition.ProtoReflect.Descriptor instead.
func (*RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{3}
}

func (x *RemovePosition) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

//
// Set the holding position used by the cellar.
//
// Represents function `setHoldingPosition(address newHoldingPosition)`
type SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the new holding position to use
	NewHoldingPosition string `protobuf:"bytes,1,opt,name=new_holding_position,json=newHoldingPosition,proto3" json:"new_holding_position,omitempty"`
}

func (x *SetHoldingPosition) Reset() {
	*x = SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHoldingPosition) ProtoMessage() {}

func (x *SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{4}
}

func (x *SetHoldingPosition) GetNewHoldingPosition() string {
	if x != nil {
		return x.NewHoldingPosition
	}
	return ""
}

//
// Represents swap parameters for UniswapV2
type UniV2SwapParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of addresses dictating what swap path to follow
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	// Amount of the first asset in the path to swap
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The minimum amount of the last asset in the path to receive
	AmountOutMin string `protobuf:"bytes,3,opt,name=amount_out_min,json=amountOutMin,proto3" json:"amount_out_min,omitempty"`
}

func (x *UniV2SwapParams) Reset() {
	*x = UniV2SwapParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniV2SwapParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniV2SwapParams) ProtoMessage() {}

func (x *UniV2SwapParams) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniV2SwapParams.ProtoReflect.Descriptor instead.
func (*UniV2SwapParams) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{5}
}

func (x *UniV2SwapParams) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *UniV2SwapParams) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UniV2SwapParams) GetAmountOutMin() string {
	if x != nil {
		return x.AmountOutMin
	}
	return ""
}

//
// Represents swap parameters for UniswapV3
type UniV3SwapParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of addresses dictating what swap path to follow
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	// Array of pool fees dictating what swap pools to use
	PoolFees []uint32 `protobuf:"varint,2,rep,packed,name=pool_fees,json=poolFees,proto3" json:"pool_fees,omitempty"`
	// Amount of the first asset in the path to swap
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The minimum amount of the last asset in the path to receive
	AmountOutMin string `protobuf:"bytes,4,opt,name=amount_out_min,json=amountOutMin,proto3" json:"amount_out_min,omitempty"`
}

func (x *UniV3SwapParams) Reset() {
	*x = UniV3SwapParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniV3SwapParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniV3SwapParams) ProtoMessage() {}

func (x *UniV3SwapParams) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniV3SwapParams.ProtoReflect.Descriptor instead.
func (*UniV3SwapParams) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{6}
}

func (x *UniV3SwapParams) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *UniV3SwapParams) GetPoolFees() []uint32 {
	if x != nil {
		return x.PoolFees
	}
	return nil
}

func (x *UniV3SwapParams) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UniV3SwapParams) GetAmountOutMin() string {
	if x != nil {
		return x.AmountOutMin
	}
	return ""
}

//
// Represents swap parameters for an exchange
type SwapParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Params:
	//	*SwapParams_Univ2Params
	//	*SwapParams_Univ3Params
	Params isSwapParams_Params `protobuf_oneof:"params"`
}

func (x *SwapParams) Reset() {
	*x = SwapParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapParams) ProtoMessage() {}

func (x *SwapParams) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapParams.ProtoReflect.Descriptor instead.
func (*SwapParams) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{7}
}

func (m *SwapParams) GetParams() isSwapParams_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *SwapParams) GetUniv2Params() *UniV2SwapParams {
	if x, ok := x.GetParams().(*SwapParams_Univ2Params); ok {
		return x.Univ2Params
	}
	return nil
}

func (x *SwapParams) GetUniv3Params() *UniV3SwapParams {
	if x, ok := x.GetParams().(*SwapParams_Univ3Params); ok {
		return x.Univ3Params
	}
	return nil
}

type isSwapParams_Params interface {
	isSwapParams_Params()
}

type SwapParams_Univ2Params struct {
	// Params for a Uniswap V2 swap
	Univ2Params *UniV2SwapParams `protobuf:"bytes,1,opt,name=univ2_params,json=univ2Params,proto3,oneof"`
}

type SwapParams_Univ3Params struct {
	// Params for a Uniswap V3 swap
	Univ3Params *UniV3SwapParams `protobuf:"bytes,2,opt,name=univ3_params,json=univ3Params,proto3,oneof"`
}

func (*SwapParams_Univ2Params) isSwapParams_Params() {}

func (*SwapParams_Univ3Params) isSwapParams_Params() {}

//
// Move assets between positions. To move assets from/to this cellar's holdings, specify
//the address of this cellar as the `fromPosition`/`toPosition`.
//
// Represents function `rebalance(address fromPosition, address toPosition,
//  uint256 assetsFrom, SwapRouter.Exchange exchange, bytes calldata params)
type Rebalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPosition string      `protobuf:"bytes,1,opt,name=from_position,json=fromPosition,proto3" json:"from_position,omitempty"`
	ToPosition   string      `protobuf:"bytes,2,opt,name=to_position,json=toPosition,proto3" json:"to_position,omitempty"`
	AssetsFrom   string      `protobuf:"bytes,3,opt,name=assets_from,json=assetsFrom,proto3" json:"assets_from,omitempty"`
	Exchange     Exchange    `protobuf:"varint,4,opt,name=exchange,proto3,enum=steward.v2.Exchange" json:"exchange,omitempty"`
	Params       *SwapParams `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Rebalance) Reset() {
	*x = Rebalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rebalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rebalance) ProtoMessage() {}

func (x *Rebalance) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rebalance.ProtoReflect.Descriptor instead.
func (*Rebalance) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{8}
}

func (x *Rebalance) GetFromPosition() string {
	if x != nil {
		return x.FromPosition
	}
	return ""
}

func (x *Rebalance) GetToPosition() string {
	if x != nil {
		return x.ToPosition
	}
	return ""
}

func (x *Rebalance) GetAssetsFrom() string {
	if x != nil {
		return x.AssetsFrom
	}
	return ""
}

func (x *Rebalance) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *Rebalance) GetParams() *SwapParams {
	if x != nil {
		return x.Params
	}
	return nil
}

//
// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *SetStrategistPayoutAddress) Reset() {
	*x = SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStrategistPayoutAddress) ProtoMessage() {}

func (x *SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{9}
}

func (x *SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

//
// Set the withdraw type used by the cellar.
//
// Represents function `setWithdrawType(WithdrawType newWithdrawType)`
type SetWithdrawType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The withdraw type to use for the cellar
	NewWithdrawType WithdrawType `protobuf:"varint,1,opt,name=new_withdraw_type,json=newWithdrawType,proto3,enum=steward.v2.WithdrawType" json:"new_withdraw_type,omitempty"`
}

func (x *SetWithdrawType) Reset() {
	*x = SetWithdrawType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWithdrawType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWithdrawType) ProtoMessage() {}

func (x *SetWithdrawType) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWithdrawType.ProtoReflect.Descriptor instead.
func (*SetWithdrawType) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{10}
}

func (x *SetWithdrawType) GetNewWithdrawType() WithdrawType {
	if x != nil {
		return x.NewWithdrawType
	}
	return WithdrawType_WITHDRAW_TYPE_UNSPECIFIED
}

//
// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint256 index1, uint256 index2)`
type SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint64 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint64 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
}

func (x *SwapPositions) Reset() {
	*x = SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPositions) ProtoMessage() {}

func (x *SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPositions.ProtoReflect.Descriptor instead.
func (*SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{11}
}

func (x *SwapPositions) GetIndex_1() uint64 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *SwapPositions) GetIndex_2() uint64 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

//
// Set the per-wallet deposit limit. Uses the same decimals as the current asset.
//
// Represents function `setDepositLimit()`
type SetDepositLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLimit string `protobuf:"bytes,1,opt,name=new_limit,json=newLimit,proto3" json:"new_limit,omitempty"`
}

func (x *SetDepositLimit) Reset() {
	*x = SetDepositLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDepositLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDepositLimit) ProtoMessage() {}

func (x *SetDepositLimit) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDepositLimit.ProtoReflect.Descriptor instead.
func (*SetDepositLimit) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{12}
}

func (x *SetDepositLimit) GetNewLimit() string {
	if x != nil {
		return x.NewLimit
	}
	return ""
}

//
// Set the maximum liquidity that cellar can manage. Uses the same decimals as the current asset.
//
// Represents function `setLiquidityLimit()`
type SetLiquidityLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLimit string `protobuf:"bytes,1,opt,name=new_limit,json=newLimit,proto3" json:"new_limit,omitempty"`
}

func (x *SetLiquidityLimit) Reset() {
	*x = SetLiquidityLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLiquidityLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLiquidityLimit) ProtoMessage() {}

func (x *SetLiquidityLimit) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLiquidityLimit.ProtoReflect.Descriptor instead.
func (*SetLiquidityLimit) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{13}
}

func (x *SetLiquidityLimit) GetNewLimit() string {
	if x != nil {
		return x.NewLimit
	}
	return ""
}

//
// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *SetShareLockPeriod) Reset() {
	*x = SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetShareLockPeriod) ProtoMessage() {}

func (x *SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_proto_rawDescGZIP(), []int{14}
}

func (x *SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

var File_cellar_proto protoreflect.FileDescriptor

var file_cellar_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x22, 0xd2, 0x06, 0x0a, 0x06, 0x43,
	0x65, 0x6c, 0x6c, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x14, 0x73,
	0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x09, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a,
	0x13, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x53,
	0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3f, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2a, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x46, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65,
	0x77, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x0f,
	0x55, 0x6e, 0x69, 0x56, 0x32, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x4d, 0x69,
	0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x56, 0x33, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x6f, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x4d, 0x69, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x32, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x56, 0x32, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x76, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x33, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x56, 0x33, 0x53, 0x77,
	0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x76,
	0x33, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0x57,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x44, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x31, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x22, 0x2e, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x30, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x2f, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x2a, 0x4c, 0x0a,
	0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x56, 0x32, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x56, 0x33, 0x10, 0x02, 0x2a, 0x68, 0x0a, 0x0c, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellar_proto_rawDescOnce sync.Once
	file_cellar_proto_rawDescData = file_cellar_proto_rawDesc
)

func file_cellar_proto_rawDescGZIP() []byte {
	file_cellar_proto_rawDescOnce.Do(func() {
		file_cellar_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellar_proto_rawDescData)
	})
	return file_cellar_proto_rawDescData
}

var file_cellar_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cellar_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_cellar_proto_goTypes = []interface{}{
	(Exchange)(0),                      // 0: steward.v2.Exchange
	(WithdrawType)(0),                  // 1: steward.v2.WithdrawType
	(*Cellar)(nil),                     // 2: steward.v2.Cellar
	(*AddPosition)(nil),                // 3: steward.v2.AddPosition
	(*PushPosition)(nil),               // 4: steward.v2.PushPosition
	(*RemovePosition)(nil),             // 5: steward.v2.RemovePosition
	(*SetHoldingPosition)(nil),         // 6: steward.v2.SetHoldingPosition
	(*UniV2SwapParams)(nil),            // 7: steward.v2.UniV2SwapParams
	(*UniV3SwapParams)(nil),            // 8: steward.v2.UniV3SwapParams
	(*SwapParams)(nil),                 // 9: steward.v2.SwapParams
	(*Rebalance)(nil),                  // 10: steward.v2.Rebalance
	(*SetStrategistPayoutAddress)(nil), // 11: steward.v2.SetStrategistPayoutAddress
	(*SetWithdrawType)(nil),            // 12: steward.v2.SetWithdrawType
	(*SwapPositions)(nil),              // 13: steward.v2.SwapPositions
	(*SetDepositLimit)(nil),            // 14: steward.v2.SetDepositLimit
	(*SetLiquidityLimit)(nil),          // 15: steward.v2.SetLiquidityLimit
	(*SetShareLockPeriod)(nil),         // 16: steward.v2.SetShareLockPeriod
}
var file_cellar_proto_depIdxs = []int32{
	3,  // 0: steward.v2.Cellar.add_position:type_name -> steward.v2.AddPosition
	4,  // 1: steward.v2.Cellar.push_position:type_name -> steward.v2.PushPosition
	5,  // 2: steward.v2.Cellar.remove_position:type_name -> steward.v2.RemovePosition
	6,  // 3: steward.v2.Cellar.set_holding_position:type_name -> steward.v2.SetHoldingPosition
	10, // 4: steward.v2.Cellar.rebalance:type_name -> steward.v2.Rebalance
	11, // 5: steward.v2.Cellar.set_strategist_payout_address:type_name -> steward.v2.SetStrategistPayoutAddress
	12, // 6: steward.v2.Cellar.set_withdraw_type:type_name -> steward.v2.SetWithdrawType
	13, // 7: steward.v2.Cellar.swap_positions:type_name -> steward.v2.SwapPositions
	14, // 8: steward.v2.Cellar.set_deposit_limit:type_name -> steward.v2.SetDepositLimit
	15, // 9: steward.v2.Cellar.set_liquidity_limit:type_name -> steward.v2.SetLiquidityLimit
	16, // 10: steward.v2.Cellar.set_share_lock_period:type_name -> steward.v2.SetShareLockPeriod
	7,  // 11: steward.v2.SwapParams.univ2_params:type_name -> steward.v2.UniV2SwapParams
	8,  // 12: steward.v2.SwapParams.univ3_params:type_name -> steward.v2.UniV3SwapParams
	0,  // 13: steward.v2.Rebalance.exchange:type_name -> steward.v2.Exchange
	9,  // 14: steward.v2.Rebalance.params:type_name -> steward.v2.SwapParams
	1,  // 15: steward.v2.SetWithdrawType.new_withdraw_type:type_name -> steward.v2.WithdrawType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_cellar_proto_init() }
func file_cellar_proto_init() {
	if File_cellar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cellar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cellar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniV2SwapParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniV3SwapParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rebalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWithdrawType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDepositLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLiquidityLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cellar_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Cellar_AddPosition)(nil),
		(*Cellar_PushPosition)(nil),
		(*Cellar_RemovePosition)(nil),
		(*Cellar_SetHoldingPosition)(nil),
		(*Cellar_Rebalance)(nil),
		(*Cellar_SetStrategistPayoutAddress)(nil),
		(*Cellar_SetWithdrawType)(nil),
		(*Cellar_SwapPositions)(nil),
		(*Cellar_SetDepositLimit)(nil),
		(*Cellar_SetLiquidityLimit)(nil),
		(*Cellar_SetShareLockPeriod)(nil),
	}
	file_cellar_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SwapParams_Univ2Params)(nil),
		(*SwapParams_Univ3Params)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellar_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cellar_proto_goTypes,
		DependencyIndexes: file_cellar_proto_depIdxs,
		EnumInfos:         file_cellar_proto_enumTypes,
		MessageInfos:      file_cellar_proto_msgTypes,
	}.Build()
	File_cellar_proto = out.File
	file_cellar_proto_rawDesc = nil
	file_cellar_proto_goTypes = nil
	file_cellar_proto_depIdxs = nil
}
