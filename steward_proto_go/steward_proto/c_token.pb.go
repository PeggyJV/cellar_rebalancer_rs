//
// Protos for function calls to the Compound CToken adaptor.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: adaptors/compound/c_token.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents call data for the Compound C Token adaptor V1, managing lending positions on Compound.
type CompoundCTokenAdaptorV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//	*CompoundCTokenAdaptorV1_Swap
	//	*CompoundCTokenAdaptorV1_OracleSwap
	//	*CompoundCTokenAdaptorV1_RevokeApproval
	//	*CompoundCTokenAdaptorV1_DepositToCompound_
	//	*CompoundCTokenAdaptorV1_WithdrawFromCompound_
	//	*CompoundCTokenAdaptorV1_ClaimComp_
	//	*CompoundCTokenAdaptorV1_ClaimCompAndSwap_
	Function isCompoundCTokenAdaptorV1_Function `protobuf_oneof:"function"`
}

func (x *CompoundCTokenAdaptorV1) Reset() {
	*x = CompoundCTokenAdaptorV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV1) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV1) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV1.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV1) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{0}
}

func (m *CompoundCTokenAdaptorV1) GetFunction() isCompoundCTokenAdaptorV1_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1) GetSwap() *Swap {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV1_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1) GetOracleSwap() *OracleSwap {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV1_OracleSwap); ok {
		return x.OracleSwap
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1) GetRevokeApproval() *RevokeApproval {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV1_RevokeApproval); ok {
		return x.RevokeApproval
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1) GetDepositToCompound() *CompoundCTokenAdaptorV1_DepositToCompound {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV1_DepositToCompound_); ok {
		return x.DepositToCompound
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1) GetWithdrawFromCompound() *CompoundCTokenAdaptorV1_WithdrawFromCompound {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV1_WithdrawFromCompound_); ok {
		return x.WithdrawFromCompound
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1) GetClaimComp() *CompoundCTokenAdaptorV1_ClaimComp {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV1_ClaimComp_); ok {
		return x.ClaimComp
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1) GetClaimCompAndSwap() *CompoundCTokenAdaptorV1_ClaimCompAndSwap {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV1_ClaimCompAndSwap_); ok {
		return x.ClaimCompAndSwap
	}
	return nil
}

type isCompoundCTokenAdaptorV1_Function interface {
	isCompoundCTokenAdaptorV1_Function()
}

type CompoundCTokenAdaptorV1_Swap struct {
	// Represents function `swap(ERC20 assetIn, ERC20 assetOut, uint256 amountIn, SwapRouter.Exchange exchange, bytes memory params)`
	Swap *Swap `protobuf:"bytes,1,opt,name=swap,proto3,oneof"`
}

type CompoundCTokenAdaptorV1_OracleSwap struct {
	// Represents function `oracleSwap(ERC20 assetIn, ERC20 assetOut, uint256 amountIn, SwapRouter.Exchange exchange, bytes memory params, uint64 slippage)`
	OracleSwap *OracleSwap `protobuf:"bytes,2,opt,name=oracle_swap,json=oracleSwap,proto3,oneof"`
}

type CompoundCTokenAdaptorV1_RevokeApproval struct {
	// Represents function `revokeApproval(ERC20 asset, address spender)`
	RevokeApproval *RevokeApproval `protobuf:"bytes,3,opt,name=revoke_approval,json=revokeApproval,proto3,oneof"`
}

type CompoundCTokenAdaptorV1_DepositToCompound_ struct {
	// Represents function `depositToCompound(CErc20 market, uint256 amountToDeposit)`
	DepositToCompound *CompoundCTokenAdaptorV1_DepositToCompound `protobuf:"bytes,4,opt,name=deposit_to_compound,json=depositToCompound,proto3,oneof"`
}

type CompoundCTokenAdaptorV1_WithdrawFromCompound_ struct {
	// Represents function `withdrawFromCompound(CErc20 market, uint256 amountToWithdraw)`
	WithdrawFromCompound *CompoundCTokenAdaptorV1_WithdrawFromCompound `protobuf:"bytes,5,opt,name=withdraw_from_compound,json=withdrawFromCompound,proto3,oneof"`
}

type CompoundCTokenAdaptorV1_ClaimComp_ struct {
	// Represents function `claimComp()`
	ClaimComp *CompoundCTokenAdaptorV1_ClaimComp `protobuf:"bytes,6,opt,name=claim_comp,json=claimComp,proto3,oneof"`
}

type CompoundCTokenAdaptorV1_ClaimCompAndSwap_ struct {
	// Represents function `claimCompAndSwap(ERC20 assetOut, SwapRouter.Exchange exchange, bytes memory params, uint64 slippage)`
	ClaimCompAndSwap *CompoundCTokenAdaptorV1_ClaimCompAndSwap `protobuf:"bytes,7,opt,name=claim_comp_and_swap,json=claimCompAndSwap,proto3,oneof"`
}

func (*CompoundCTokenAdaptorV1_Swap) isCompoundCTokenAdaptorV1_Function() {}

func (*CompoundCTokenAdaptorV1_OracleSwap) isCompoundCTokenAdaptorV1_Function() {}

func (*CompoundCTokenAdaptorV1_RevokeApproval) isCompoundCTokenAdaptorV1_Function() {}

func (*CompoundCTokenAdaptorV1_DepositToCompound_) isCompoundCTokenAdaptorV1_Function() {}

func (*CompoundCTokenAdaptorV1_WithdrawFromCompound_) isCompoundCTokenAdaptorV1_Function() {}

func (*CompoundCTokenAdaptorV1_ClaimComp_) isCompoundCTokenAdaptorV1_Function() {}

func (*CompoundCTokenAdaptorV1_ClaimCompAndSwap_) isCompoundCTokenAdaptorV1_Function() {}

// Represents call data for the Compound C Token adaptor V2, managing lending positions on Compound.
type CompoundCTokenAdaptorV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//	*CompoundCTokenAdaptorV2_RevokeApproval
	//	*CompoundCTokenAdaptorV2_DepositToCompound_
	//	*CompoundCTokenAdaptorV2_WithdrawFromCompound_
	//	*CompoundCTokenAdaptorV2_ClaimComp_
	Function isCompoundCTokenAdaptorV2_Function `protobuf_oneof:"function"`
}

func (x *CompoundCTokenAdaptorV2) Reset() {
	*x = CompoundCTokenAdaptorV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV2) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV2) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV2.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV2) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{1}
}

func (m *CompoundCTokenAdaptorV2) GetFunction() isCompoundCTokenAdaptorV2_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CompoundCTokenAdaptorV2) GetRevokeApproval() *RevokeApproval {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV2_RevokeApproval); ok {
		return x.RevokeApproval
	}
	return nil
}

func (x *CompoundCTokenAdaptorV2) GetDepositToCompound() *CompoundCTokenAdaptorV2_DepositToCompound {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV2_DepositToCompound_); ok {
		return x.DepositToCompound
	}
	return nil
}

func (x *CompoundCTokenAdaptorV2) GetWithdrawFromCompound() *CompoundCTokenAdaptorV2_WithdrawFromCompound {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV2_WithdrawFromCompound_); ok {
		return x.WithdrawFromCompound
	}
	return nil
}

func (x *CompoundCTokenAdaptorV2) GetClaimComp() *CompoundCTokenAdaptorV2_ClaimComp {
	if x, ok := x.GetFunction().(*CompoundCTokenAdaptorV2_ClaimComp_); ok {
		return x.ClaimComp
	}
	return nil
}

type isCompoundCTokenAdaptorV2_Function interface {
	isCompoundCTokenAdaptorV2_Function()
}

type CompoundCTokenAdaptorV2_RevokeApproval struct {
	// Represents function `revokeApproval(ERC20 asset, address spender)`
	RevokeApproval *RevokeApproval `protobuf:"bytes,1,opt,name=revoke_approval,json=revokeApproval,proto3,oneof"`
}

type CompoundCTokenAdaptorV2_DepositToCompound_ struct {
	// Represents function `depositToCompound(CErc20 market, uint256 amountToDeposit)`
	DepositToCompound *CompoundCTokenAdaptorV2_DepositToCompound `protobuf:"bytes,2,opt,name=deposit_to_compound,json=depositToCompound,proto3,oneof"`
}

type CompoundCTokenAdaptorV2_WithdrawFromCompound_ struct {
	// Represents function `withdrawFromCompound(CErc20 market, uint256 amountToWithdraw)`
	WithdrawFromCompound *CompoundCTokenAdaptorV2_WithdrawFromCompound `protobuf:"bytes,3,opt,name=withdraw_from_compound,json=withdrawFromCompound,proto3,oneof"`
}

type CompoundCTokenAdaptorV2_ClaimComp_ struct {
	// Represents function `claimComp()`
	ClaimComp *CompoundCTokenAdaptorV2_ClaimComp `protobuf:"bytes,4,opt,name=claim_comp,json=claimComp,proto3,oneof"`
}

func (*CompoundCTokenAdaptorV2_RevokeApproval) isCompoundCTokenAdaptorV2_Function() {}

func (*CompoundCTokenAdaptorV2_DepositToCompound_) isCompoundCTokenAdaptorV2_Function() {}

func (*CompoundCTokenAdaptorV2_WithdrawFromCompound_) isCompoundCTokenAdaptorV2_Function() {}

func (*CompoundCTokenAdaptorV2_ClaimComp_) isCompoundCTokenAdaptorV2_Function() {}

type CompoundCTokenAdaptorV1Calls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*CompoundCTokenAdaptorV1 `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *CompoundCTokenAdaptorV1Calls) Reset() {
	*x = CompoundCTokenAdaptorV1Calls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV1Calls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV1Calls) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV1Calls) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV1Calls.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV1Calls) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{2}
}

func (x *CompoundCTokenAdaptorV1Calls) GetCalls() []*CompoundCTokenAdaptorV1 {
	if x != nil {
		return x.Calls
	}
	return nil
}

type CompoundCTokenAdaptorV2Calls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*CompoundCTokenAdaptorV2 `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *CompoundCTokenAdaptorV2Calls) Reset() {
	*x = CompoundCTokenAdaptorV2Calls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV2Calls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV2Calls) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV2Calls) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV2Calls.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV2Calls) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{3}
}

func (x *CompoundCTokenAdaptorV2Calls) GetCalls() []*CompoundCTokenAdaptorV2 {
	if x != nil {
		return x.Calls
	}
	return nil
}

//
// Allows strategists to lend assets on Compound.
//
// Represents function `depositToCompound(CErc20 market, uint256 amountToDeposit)`
type CompoundCTokenAdaptorV1_DepositToCompound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market          string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	AmountToDeposit string `protobuf:"bytes,2,opt,name=amount_to_deposit,json=amountToDeposit,proto3" json:"amount_to_deposit,omitempty"`
}

func (x *CompoundCTokenAdaptorV1_DepositToCompound) Reset() {
	*x = CompoundCTokenAdaptorV1_DepositToCompound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV1_DepositToCompound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV1_DepositToCompound) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV1_DepositToCompound) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV1_DepositToCompound.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV1_DepositToCompound) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CompoundCTokenAdaptorV1_DepositToCompound) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CompoundCTokenAdaptorV1_DepositToCompound) GetAmountToDeposit() string {
	if x != nil {
		return x.AmountToDeposit
	}
	return ""
}

//
// Allows strategists to withdraw assets from Compound.
//
// Represents function `withdrawFromCompound(CErc20 market, uint256 amountToWithdraw)`
type CompoundCTokenAdaptorV1_WithdrawFromCompound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market           string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	AmountToWithdraw string `protobuf:"bytes,2,opt,name=amount_to_withdraw,json=amountToWithdraw,proto3" json:"amount_to_withdraw,omitempty"`
}

func (x *CompoundCTokenAdaptorV1_WithdrawFromCompound) Reset() {
	*x = CompoundCTokenAdaptorV1_WithdrawFromCompound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV1_WithdrawFromCompound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV1_WithdrawFromCompound) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV1_WithdrawFromCompound) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV1_WithdrawFromCompound.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV1_WithdrawFromCompound) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CompoundCTokenAdaptorV1_WithdrawFromCompound) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CompoundCTokenAdaptorV1_WithdrawFromCompound) GetAmountToWithdraw() string {
	if x != nil {
		return x.AmountToWithdraw
	}
	return ""
}

//
// Allows strategists to claim COMP rewards.
//
// Represents function `claimComp()`
type CompoundCTokenAdaptorV1_ClaimComp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompoundCTokenAdaptorV1_ClaimComp) Reset() {
	*x = CompoundCTokenAdaptorV1_ClaimComp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV1_ClaimComp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV1_ClaimComp) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV1_ClaimComp) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV1_ClaimComp.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV1_ClaimComp) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{0, 2}
}

//
// Allows strategists to claim COMP and immediately swap it using oracleSwap.
//
// Represents function `claimCompAndSwap(ERC20 assetOut, SwapRouter.Exchange exchange, bytes memory params, uint64 slippage)`
type CompoundCTokenAdaptorV1_ClaimCompAndSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetOut string            `protobuf:"bytes,1,opt,name=asset_out,json=assetOut,proto3" json:"asset_out,omitempty"`
	Exchange Exchange          `protobuf:"varint,2,opt,name=exchange,proto3,enum=steward.v3.Exchange" json:"exchange,omitempty"`
	Params   *OracleSwapParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	Slippage uint64            `protobuf:"varint,4,opt,name=slippage,proto3" json:"slippage,omitempty"`
}

func (x *CompoundCTokenAdaptorV1_ClaimCompAndSwap) Reset() {
	*x = CompoundCTokenAdaptorV1_ClaimCompAndSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV1_ClaimCompAndSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV1_ClaimCompAndSwap) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV1_ClaimCompAndSwap) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV1_ClaimCompAndSwap.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV1_ClaimCompAndSwap) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CompoundCTokenAdaptorV1_ClaimCompAndSwap) GetAssetOut() string {
	if x != nil {
		return x.AssetOut
	}
	return ""
}

func (x *CompoundCTokenAdaptorV1_ClaimCompAndSwap) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *CompoundCTokenAdaptorV1_ClaimCompAndSwap) GetParams() *OracleSwapParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CompoundCTokenAdaptorV1_ClaimCompAndSwap) GetSlippage() uint64 {
	if x != nil {
		return x.Slippage
	}
	return 0
}

//
// Allows strategists to lend assets on Compound.
//
// Represents function `depositToCompound(CErc20 market, uint256 amountToDeposit)`
type CompoundCTokenAdaptorV2_DepositToCompound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market          string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	AmountToDeposit string `protobuf:"bytes,2,opt,name=amount_to_deposit,json=amountToDeposit,proto3" json:"amount_to_deposit,omitempty"`
}

func (x *CompoundCTokenAdaptorV2_DepositToCompound) Reset() {
	*x = CompoundCTokenAdaptorV2_DepositToCompound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV2_DepositToCompound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV2_DepositToCompound) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV2_DepositToCompound) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV2_DepositToCompound.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV2_DepositToCompound) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CompoundCTokenAdaptorV2_DepositToCompound) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CompoundCTokenAdaptorV2_DepositToCompound) GetAmountToDeposit() string {
	if x != nil {
		return x.AmountToDeposit
	}
	return ""
}

//
// Allows strategists to withdraw assets from Compound.
//
// Represents function `withdrawFromCompound(CErc20 market, uint256 amountToWithdraw)`
type CompoundCTokenAdaptorV2_WithdrawFromCompound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market           string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	AmountToWithdraw string `protobuf:"bytes,2,opt,name=amount_to_withdraw,json=amountToWithdraw,proto3" json:"amount_to_withdraw,omitempty"`
}

func (x *CompoundCTokenAdaptorV2_WithdrawFromCompound) Reset() {
	*x = CompoundCTokenAdaptorV2_WithdrawFromCompound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV2_WithdrawFromCompound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV2_WithdrawFromCompound) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV2_WithdrawFromCompound) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV2_WithdrawFromCompound.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV2_WithdrawFromCompound) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CompoundCTokenAdaptorV2_WithdrawFromCompound) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CompoundCTokenAdaptorV2_WithdrawFromCompound) GetAmountToWithdraw() string {
	if x != nil {
		return x.AmountToWithdraw
	}
	return ""
}

//
// Allows strategists to claim COMP rewards.
//
// Represents function `claimComp()`
type CompoundCTokenAdaptorV2_ClaimComp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompoundCTokenAdaptorV2_ClaimComp) Reset() {
	*x = CompoundCTokenAdaptorV2_ClaimComp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adaptors_compound_c_token_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundCTokenAdaptorV2_ClaimComp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundCTokenAdaptorV2_ClaimComp) ProtoMessage() {}

func (x *CompoundCTokenAdaptorV2_ClaimComp) ProtoReflect() protoreflect.Message {
	mi := &file_adaptors_compound_c_token_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundCTokenAdaptorV2_ClaimComp.ProtoReflect.Descriptor instead.
func (*CompoundCTokenAdaptorV2_ClaimComp) Descriptor() ([]byte, []int) {
	return file_adaptors_compound_c_token_proto_rawDescGZIP(), []int{1, 2}
}

var File_adaptors_compound_c_token_proto protoreflect.FileDescriptor

var file_adaptors_compound_c_token_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x2f, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x1a, 0x13, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdb, 0x07, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x12, 0x26, 0x0a, 0x04,
	0x73, 0x77, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x77, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73,
	0x77, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x45, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x70, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x56, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x14, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x12, 0x65, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x41, 0x6e, 0x64,
	0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x1a, 0x57, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x1a, 0x5c, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x1a,
	0x0b, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x1a, 0xb3, 0x01, 0x0a,
	0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdb,
	0x04, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x67, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x56, 0x32, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x70, 0x0a, 0x16, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x56, 0x32, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x1a, 0x57, 0x0a, 0x11,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x1a, 0x5c, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x1a, 0x0b, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x1c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x05,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x31,
	0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x32, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x52, 0x05, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adaptors_compound_c_token_proto_rawDescOnce sync.Once
	file_adaptors_compound_c_token_proto_rawDescData = file_adaptors_compound_c_token_proto_rawDesc
)

func file_adaptors_compound_c_token_proto_rawDescGZIP() []byte {
	file_adaptors_compound_c_token_proto_rawDescOnce.Do(func() {
		file_adaptors_compound_c_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_adaptors_compound_c_token_proto_rawDescData)
	})
	return file_adaptors_compound_c_token_proto_rawDescData
}

var file_adaptors_compound_c_token_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_adaptors_compound_c_token_proto_goTypes = []interface{}{
	(*CompoundCTokenAdaptorV1)(nil),                      // 0: steward.v3.CompoundCTokenAdaptorV1
	(*CompoundCTokenAdaptorV2)(nil),                      // 1: steward.v3.CompoundCTokenAdaptorV2
	(*CompoundCTokenAdaptorV1Calls)(nil),                 // 2: steward.v3.CompoundCTokenAdaptorV1Calls
	(*CompoundCTokenAdaptorV2Calls)(nil),                 // 3: steward.v3.CompoundCTokenAdaptorV2Calls
	(*CompoundCTokenAdaptorV1_DepositToCompound)(nil),    // 4: steward.v3.CompoundCTokenAdaptorV1.DepositToCompound
	(*CompoundCTokenAdaptorV1_WithdrawFromCompound)(nil), // 5: steward.v3.CompoundCTokenAdaptorV1.WithdrawFromCompound
	(*CompoundCTokenAdaptorV1_ClaimComp)(nil),            // 6: steward.v3.CompoundCTokenAdaptorV1.ClaimComp
	(*CompoundCTokenAdaptorV1_ClaimCompAndSwap)(nil),     // 7: steward.v3.CompoundCTokenAdaptorV1.ClaimCompAndSwap
	(*CompoundCTokenAdaptorV2_DepositToCompound)(nil),    // 8: steward.v3.CompoundCTokenAdaptorV2.DepositToCompound
	(*CompoundCTokenAdaptorV2_WithdrawFromCompound)(nil), // 9: steward.v3.CompoundCTokenAdaptorV2.WithdrawFromCompound
	(*CompoundCTokenAdaptorV2_ClaimComp)(nil),            // 10: steward.v3.CompoundCTokenAdaptorV2.ClaimComp
	(*Swap)(nil),             // 11: steward.v3.Swap
	(*OracleSwap)(nil),       // 12: steward.v3.OracleSwap
	(*RevokeApproval)(nil),   // 13: steward.v3.RevokeApproval
	(Exchange)(0),            // 14: steward.v3.Exchange
	(*OracleSwapParams)(nil), // 15: steward.v3.OracleSwapParams
}
var file_adaptors_compound_c_token_proto_depIdxs = []int32{
	11, // 0: steward.v3.CompoundCTokenAdaptorV1.swap:type_name -> steward.v3.Swap
	12, // 1: steward.v3.CompoundCTokenAdaptorV1.oracle_swap:type_name -> steward.v3.OracleSwap
	13, // 2: steward.v3.CompoundCTokenAdaptorV1.revoke_approval:type_name -> steward.v3.RevokeApproval
	4,  // 3: steward.v3.CompoundCTokenAdaptorV1.deposit_to_compound:type_name -> steward.v3.CompoundCTokenAdaptorV1.DepositToCompound
	5,  // 4: steward.v3.CompoundCTokenAdaptorV1.withdraw_from_compound:type_name -> steward.v3.CompoundCTokenAdaptorV1.WithdrawFromCompound
	6,  // 5: steward.v3.CompoundCTokenAdaptorV1.claim_comp:type_name -> steward.v3.CompoundCTokenAdaptorV1.ClaimComp
	7,  // 6: steward.v3.CompoundCTokenAdaptorV1.claim_comp_and_swap:type_name -> steward.v3.CompoundCTokenAdaptorV1.ClaimCompAndSwap
	13, // 7: steward.v3.CompoundCTokenAdaptorV2.revoke_approval:type_name -> steward.v3.RevokeApproval
	8,  // 8: steward.v3.CompoundCTokenAdaptorV2.deposit_to_compound:type_name -> steward.v3.CompoundCTokenAdaptorV2.DepositToCompound
	9,  // 9: steward.v3.CompoundCTokenAdaptorV2.withdraw_from_compound:type_name -> steward.v3.CompoundCTokenAdaptorV2.WithdrawFromCompound
	10, // 10: steward.v3.CompoundCTokenAdaptorV2.claim_comp:type_name -> steward.v3.CompoundCTokenAdaptorV2.ClaimComp
	0,  // 11: steward.v3.CompoundCTokenAdaptorV1Calls.calls:type_name -> steward.v3.CompoundCTokenAdaptorV1
	1,  // 12: steward.v3.CompoundCTokenAdaptorV2Calls.calls:type_name -> steward.v3.CompoundCTokenAdaptorV2
	14, // 13: steward.v3.CompoundCTokenAdaptorV1.ClaimCompAndSwap.exchange:type_name -> steward.v3.Exchange
	15, // 14: steward.v3.CompoundCTokenAdaptorV1.ClaimCompAndSwap.params:type_name -> steward.v3.OracleSwapParams
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_adaptors_compound_c_token_proto_init() }
func file_adaptors_compound_c_token_proto_init() {
	if File_adaptors_compound_c_token_proto != nil {
		return
	}
	file_adaptors_base_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_adaptors_compound_c_token_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV1Calls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV2Calls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV1_DepositToCompound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV1_WithdrawFromCompound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV1_ClaimComp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV1_ClaimCompAndSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV2_DepositToCompound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV2_WithdrawFromCompound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adaptors_compound_c_token_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundCTokenAdaptorV2_ClaimComp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_adaptors_compound_c_token_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CompoundCTokenAdaptorV1_Swap)(nil),
		(*CompoundCTokenAdaptorV1_OracleSwap)(nil),
		(*CompoundCTokenAdaptorV1_RevokeApproval)(nil),
		(*CompoundCTokenAdaptorV1_DepositToCompound_)(nil),
		(*CompoundCTokenAdaptorV1_WithdrawFromCompound_)(nil),
		(*CompoundCTokenAdaptorV1_ClaimComp_)(nil),
		(*CompoundCTokenAdaptorV1_ClaimCompAndSwap_)(nil),
	}
	file_adaptors_compound_c_token_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CompoundCTokenAdaptorV2_RevokeApproval)(nil),
		(*CompoundCTokenAdaptorV2_DepositToCompound_)(nil),
		(*CompoundCTokenAdaptorV2_WithdrawFromCompound_)(nil),
		(*CompoundCTokenAdaptorV2_ClaimComp_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adaptors_compound_c_token_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_adaptors_compound_c_token_proto_goTypes,
		DependencyIndexes: file_adaptors_compound_c_token_proto_depIdxs,
		MessageInfos:      file_adaptors_compound_c_token_proto_msgTypes,
	}.Build()
	File_adaptors_compound_c_token_proto = out.File
	file_adaptors_compound_c_token_proto_rawDesc = nil
	file_adaptors_compound_c_token_proto_goTypes = nil
	file_adaptors_compound_c_token_proto_depIdxs = nil
}
