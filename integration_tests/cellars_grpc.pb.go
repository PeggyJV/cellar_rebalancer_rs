// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: cellars.proto

package integration_tests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniswapV3Client is the client API for UniswapV3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniswapV3Client interface {
	Rebalance(ctx context.Context, in *UniswapV3RebalanceRequest, opts ...grpc.CallOption) (*UniswapV3RebalanceResponse, error)
}

type uniswapV3Client struct {
	cc grpc.ClientConnInterface
}

func NewUniswapV3Client(cc grpc.ClientConnInterface) UniswapV3Client {
	return &uniswapV3Client{cc}
}

func (c *uniswapV3Client) Rebalance(ctx context.Context, in *UniswapV3RebalanceRequest, opts ...grpc.CallOption) (*UniswapV3RebalanceResponse, error) {
	out := new(UniswapV3RebalanceResponse)
	err := c.cc.Invoke(ctx, "/cellars.v1.UniswapV3/Rebalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniswapV3Server is the server API for UniswapV3 service.
// All implementations must embed UnimplementedUniswapV3Server
// for forward compatibility
type UniswapV3Server interface {
	Rebalance(context.Context, *UniswapV3RebalanceRequest) (*UniswapV3RebalanceResponse, error)
	mustEmbedUnimplementedUniswapV3Server()
}

// UnimplementedUniswapV3Server must be embedded to have forward compatible implementations.
type UnimplementedUniswapV3Server struct {
}

func (UnimplementedUniswapV3Server) Rebalance(context.Context, *UniswapV3RebalanceRequest) (*UniswapV3RebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}
func (UnimplementedUniswapV3Server) mustEmbedUnimplementedUniswapV3Server() {}

// UnsafeUniswapV3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniswapV3Server will
// result in compilation errors.
type UnsafeUniswapV3Server interface {
	mustEmbedUnimplementedUniswapV3Server()
}

func RegisterUniswapV3Server(s grpc.ServiceRegistrar, srv UniswapV3Server) {
	s.RegisterService(&UniswapV3_ServiceDesc, srv)
}

func _UniswapV3_Rebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniswapV3RebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniswapV3Server).Rebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellars.v1.UniswapV3/Rebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniswapV3Server).Rebalance(ctx, req.(*UniswapV3RebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniswapV3_ServiceDesc is the grpc.ServiceDesc for UniswapV3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniswapV3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cellars.v1.UniswapV3",
	HandlerType: (*UniswapV3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rebalance",
			Handler:    _UniswapV3_Rebalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cellars.proto",
}
