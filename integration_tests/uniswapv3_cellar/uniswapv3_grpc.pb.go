// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: uniswapv3.proto

package uniswapv3_cellar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniswapV3CellarAllocatorClient is the client API for UniswapV3CellarAllocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniswapV3CellarAllocatorClient interface {
	Rebalance(ctx context.Context, in *RebalanceRequest, opts ...grpc.CallOption) (*RebalanceResponse, error)
}

type uniswapV3CellarAllocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewUniswapV3CellarAllocatorClient(cc grpc.ClientConnInterface) UniswapV3CellarAllocatorClient {
	return &uniswapV3CellarAllocatorClient{cc}
}

func (c *uniswapV3CellarAllocatorClient) Rebalance(ctx context.Context, in *RebalanceRequest, opts ...grpc.CallOption) (*RebalanceResponse, error) {
	out := new(RebalanceResponse)
	err := c.cc.Invoke(ctx, "/cellars.uniswapv3.v1.UniswapV3CellarAllocator/Rebalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniswapV3CellarAllocatorServer is the server API for UniswapV3CellarAllocator service.
// All implementations must embed UnimplementedUniswapV3CellarAllocatorServer
// for forward compatibility
type UniswapV3CellarAllocatorServer interface {
	Rebalance(context.Context, *RebalanceRequest) (*RebalanceResponse, error)
	mustEmbedUnimplementedUniswapV3CellarAllocatorServer()
}

// UnimplementedUniswapV3CellarAllocatorServer must be embedded to have forward compatible implementations.
type UnimplementedUniswapV3CellarAllocatorServer struct {
}

func (UnimplementedUniswapV3CellarAllocatorServer) Rebalance(context.Context, *RebalanceRequest) (*RebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}
func (UnimplementedUniswapV3CellarAllocatorServer) mustEmbedUnimplementedUniswapV3CellarAllocatorServer() {
}

// UnsafeUniswapV3CellarAllocatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniswapV3CellarAllocatorServer will
// result in compilation errors.
type UnsafeUniswapV3CellarAllocatorServer interface {
	mustEmbedUnimplementedUniswapV3CellarAllocatorServer()
}

func RegisterUniswapV3CellarAllocatorServer(s grpc.ServiceRegistrar, srv UniswapV3CellarAllocatorServer) {
	s.RegisterService(&UniswapV3CellarAllocator_ServiceDesc, srv)
}

func _UniswapV3CellarAllocator_Rebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniswapV3CellarAllocatorServer).Rebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellars.uniswapv3.v1.UniswapV3CellarAllocator/Rebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniswapV3CellarAllocatorServer).Rebalance(ctx, req.(*RebalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniswapV3CellarAllocator_ServiceDesc is the grpc.ServiceDesc for UniswapV3CellarAllocator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniswapV3CellarAllocator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cellars.uniswapv3.v1.UniswapV3CellarAllocator",
	HandlerType: (*UniswapV3CellarAllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rebalance",
			Handler:    _UniswapV3CellarAllocator_Rebalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uniswapv3.proto",
}
